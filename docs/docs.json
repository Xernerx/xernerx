{
	"id": 0,
	"name": "XERNERX",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "client/XernerxClient",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 2,
					"name": "XernerxClient",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 47,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 13,
									"character": 1,
									"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/client/XernerxClient.ts#L13"
								}
							],
							"signatures": [
								{
									"id": 48,
									"name": "new XernerxClient",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/client/XernerxClient.ts",
											"line": 13,
											"character": 1,
											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/client/XernerxClient.ts#L13"
										}
									],
									"typeParameters": [
										{
											"id": 49,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"default": {
												"type": "reflection",
												"declaration": {
													"id": 50,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 51,
											"name": "DiscordOptions",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "ClientOptions"
												},
												"name": "ClientOptions",
												"package": "discord.js"
											}
										},
										{
											"id": 52,
											"name": "XernerxOptions",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 326,
												"name": "XernerxOptions",
												"package": "xernerx"
											}
										},
										{
											"id": 53,
											"name": "config",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": 49,
												"name": "T",
												"package": "xernerx",
												"qualifiedName": "XernerxClient.T",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 2,
										"typeArguments": [
											{
												"type": "reference",
												"target": 49,
												"name": "T",
												"package": "xernerx",
												"qualifiedName": "XernerxClient.T",
												"refersToTypeParameter": true
											}
										],
										"name": "XernerxClient",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.constructor"
							}
						},
						{
							"id": 71,
							"name": "application",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1008,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
											"qualifiedName": "ClientApplication"
										},
										"name": "ClientApplication",
										"package": "discord.js"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.application"
							}
						},
						{
							"id": 72,
							"name": "channels",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1009,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
									"qualifiedName": "ChannelManager"
								},
								"name": "ChannelManager",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.channels"
							}
						},
						{
							"id": 75,
							"name": "guilds",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1011,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
									"qualifiedName": "GuildManager"
								},
								"name": "GuildManager",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.guilds"
							}
						},
						{
							"id": 76,
							"name": "options",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1012,
									"character": 9
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Omit"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "ClientOptions"
												},
												"name": "ClientOptions",
												"package": "discord.js"
											},
											{
												"type": "literal",
												"value": "intents"
											}
										],
										"name": "Omit",
										"package": "typescript"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 77,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"children": [
												{
													"id": 78,
													"name": "intents",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1012,
															"character": 53
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
															"qualifiedName": "IntentsBitField"
														},
														"name": "IntentsBitField",
														"package": "discord.js"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [78]
												}
											],
											"sources": [
												{
													"fileName": "node_modules/discord.js/typings/index.d.mts",
													"line": 1012,
													"character": 51
												}
											]
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.options"
							}
						},
						{
							"id": 81,
							"name": "readyTimestamp",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1014,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.readyTimestamp"
							}
						},
						{
							"id": 199,
							"name": "rest",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 533,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/@discordjs/rest/dist/index.d.mts",
									"qualifiedName": "REST"
								},
								"name": "REST",
								"package": "@discordjs/rest"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.rest"
							}
						},
						{
							"id": 54,
							"name": "settings",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 11,
									"character": 25,
									"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/client/XernerxClient.ts#L11"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 55,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 56,
											"name": "debug",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "optional settings\ndev"
													}
												]
											},
											"sources": [
												{
													"fileName": "src/schema/XernerxOptions.ts",
													"line": 11,
													"character": 1,
													"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L11"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "..."
										},
										{
											"id": 58,
											"name": "log",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "setup"
													}
												]
											},
											"sources": [
												{
													"fileName": "src/schema/XernerxOptions.ts",
													"line": 14,
													"character": 1,
													"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L14"
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 59,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 61,
															"name": "levels",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/schema/XernerxOptions.ts",
																	"line": 17,
																	"character": 3,
																	"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L17"
																}
															],
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 62,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {},
																	"children": [
																		{
																			"id": 66,
																			"name": "debug",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "src/schema/XernerxOptions.ts",
																					"line": 22,
																					"character": 5,
																					"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L22"
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			},
																			"defaultValue": "..."
																		},
																		{
																			"id": 63,
																			"name": "error",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "src/schema/XernerxOptions.ts",
																					"line": 19,
																					"character": 5,
																					"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L19"
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			},
																			"defaultValue": "..."
																		},
																		{
																			"id": 65,
																			"name": "info",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "src/schema/XernerxOptions.ts",
																					"line": 21,
																					"character": 5,
																					"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L21"
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			},
																			"defaultValue": "..."
																		},
																		{
																			"id": 64,
																			"name": "warn",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "src/schema/XernerxOptions.ts",
																					"line": 20,
																					"character": 5,
																					"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L20"
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			},
																			"defaultValue": "..."
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"children": [66, 63, 65, 64]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "node_modules/zod/lib/types.d.ts",
																			"line": 1056,
																			"character": 123
																		}
																	]
																}
															},
															"defaultValue": "..."
														},
														{
															"id": 60,
															"name": "type",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/schema/XernerxOptions.ts",
																	"line": 16,
																	"character": 3,
																	"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L16"
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "literal",
																		"value": "static"
																	},
																	{
																		"type": "literal",
																		"value": "dynamic"
																	}
																]
															},
															"defaultValue": "..."
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [61, 60]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/zod/lib/types.d.ts",
															"line": 1056,
															"character": 123
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 57,
											"name": "token",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "required settings"
													}
												]
											},
											"sources": [
												{
													"fileName": "src/schema/XernerxOptions.ts",
													"line": 7,
													"character": 1,
													"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L7"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [56, 58, 57]
										}
									],
									"sources": [
										{
											"fileName": "node_modules/zod/lib/types.d.ts",
											"line": 1056,
											"character": 123
										}
									]
								}
							}
						},
						{
							"id": 83,
							"name": "shard",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1016,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
											"qualifiedName": "ShardClientUtil"
										},
										"name": "ShardClientUtil",
										"package": "discord.js"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.shard"
							}
						},
						{
							"id": 82,
							"name": "sweepers",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1015,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
									"qualifiedName": "Sweepers"
								},
								"name": "Sweepers",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.sweepers"
							}
						},
						{
							"id": 84,
							"name": "token",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1017,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.token"
							}
						},
						{
							"id": 87,
							"name": "user",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1019,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
											"qualifiedName": "ClientUser"
										},
										"name": "ClientUser",
										"package": "discord.js"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.user"
							}
						},
						{
							"id": 88,
							"name": "users",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1020,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
									"qualifiedName": "UserManager"
								},
								"name": "UserManager",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.users"
							}
						},
						{
							"id": 89,
							"name": "voice",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1021,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
									"qualifiedName": "ClientVoiceManager"
								},
								"name": "ClientVoiceManager",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.voice"
							}
						},
						{
							"id": 90,
							"name": "ws",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1022,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
									"qualifiedName": "WebSocketManager"
								},
								"name": "WebSocketManager",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.ws"
							}
						},
						{
							"id": 45,
							"name": "captureRejections",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default "
									},
									{
										"kind": "code",
										"text": "`captureRejections`"
									},
									{
										"kind": "text",
										"text": " option on all new "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " objects."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.4.0, v12.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 459,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.captureRejections"
							}
						},
						{
							"id": 44,
							"name": "captureRejectionSymbol",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Value: "
									},
									{
										"kind": "code",
										"text": "`Symbol.for('nodejs.rejection')`"
									},
									{
										"kind": "text",
										"text": "\n\nSee how to write a custom "
									},
									{
										"kind": "code",
										"text": "`rejection handler`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.4.0, v12.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 452,
									"character": 24
								}
							],
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 44,
									"name": "captureRejectionSymbol",
									"package": "@types/node",
									"qualifiedName": "EventEmitter.captureRejectionSymbol"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.captureRejectionSymbol"
							}
						},
						{
							"id": 46,
							"name": "defaultMaxListeners",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default, a maximum of "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners can be registered for any single\nevent. This limit can be changed for individual "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances\nusing the "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " method. To change the default\nfor _all_"
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances, the "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": " property\ncan be used. If this value is not a positive number, a "
									},
									{
										"kind": "code",
										"text": "`RangeError`"
									},
									{
										"kind": "text",
										"text": " is thrown.\n\nTake caution when setting the "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": " because the\nchange affects _all_ "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances, including those created before\nthe change is made. However, calling "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " still has\nprecedence over "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": ".\n\nThis is not a hard limit. The "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single\n"
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", the "
									},
									{
										"kind": "code",
										"text": "`emitter.getMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " methods can be used to\ntemporarily avoid this warning:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe "
									},
									{
										"kind": "code",
										"text": "`--trace-warnings`"
									},
									{
										"kind": "text",
										"text": " command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with "
									},
									{
										"kind": "code",
										"text": "`process.on('warning')`"
									},
									{
										"kind": "text",
										"text": " and will\nhave the additional "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`type`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`count`"
									},
									{
										"kind": "text",
										"text": " properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " property is set to "
									},
									{
										"kind": "code",
										"text": "`'MaxListenersExceededWarning'`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.2"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 498,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.defaultMaxListeners"
							}
						},
						{
							"id": 43,
							"name": "errorMonitor",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This symbol shall be used to install a listener for only monitoring "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " events. Listeners installed using this symbol are called before the regular "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is emitted. Therefore, the process will still crash if no\nregular "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " listener is installed."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.17.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 445,
									"character": 24
								}
							],
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 43,
									"name": "errorMonitor",
									"package": "@types/node",
									"qualifiedName": "EventEmitter.errorMonitor"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.errorMonitor"
							}
						},
						{
							"id": 73,
							"name": "emojis",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1010,
									"character": 13
								}
							],
							"getSignature": {
								"id": 74,
								"name": "emojis",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 1010,
										"character": 13
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
										"qualifiedName": "BaseGuildEmojiManager"
									},
									"name": "BaseGuildEmojiManager",
									"package": "discord.js"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "Discord.Client.emojis"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.emojis"
							}
						},
						{
							"id": 79,
							"name": "readyAt",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1013,
									"character": 13
								}
							],
							"getSignature": {
								"id": 80,
								"name": "readyAt",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 1013,
										"character": 13
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
										"qualifiedName": "If"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
												"qualifiedName": "Client.Ready"
											},
											"name": "Ready",
											"package": "discord.js",
											"qualifiedName": "Client.Ready",
											"refersToTypeParameter": true
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Date"
											},
											"name": "Date",
											"package": "typescript"
										},
										{
											"type": "literal",
											"value": null
										}
									],
									"name": "If",
									"package": "discord.js"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "Discord.Client.readyAt"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.readyAt"
							}
						},
						{
							"id": 85,
							"name": "uptime",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1018,
									"character": 13
								}
							],
							"getSignature": {
								"id": 86,
								"name": "uptime",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 1018,
										"character": 13
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
										"qualifiedName": "If"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
												"qualifiedName": "Client.Ready"
											},
											"name": "Ready",
											"package": "discord.js",
											"qualifiedName": "Client.Ready",
											"refersToTypeParameter": true
										},
										{
											"type": "intrinsic",
											"name": "number"
										},
										{
											"type": "literal",
											"value": null
										}
									],
									"name": "If",
									"package": "discord.js"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "Discord.Client.uptime"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.uptime"
							}
						},
						{
							"id": 200,
							"name": "[asyncDispose]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 536,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 201,
									"name": "[asyncDispose]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 536,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.[asyncDispose]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.[asyncDispose]"
							}
						},
						{
							"id": 202,
							"name": "[captureRejectionSymbol]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 136,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 203,
									"name": "[captureRejectionSymbol]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 136,
											"character": 8
										}
									],
									"typeParameters": [
										{
											"id": 204,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 205,
											"name": "error",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Error"
												},
												"name": "Error",
												"package": "typescript"
											}
										},
										{
											"id": 206,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 207,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/events.d.ts",
													"qualifiedName": "AnyRest"
												},
												"name": "AnyRest",
												"package": "@types/node"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.[captureRejectionSymbol]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.[captureRejectionSymbol]"
							}
						},
						{
							"id": 208,
							"name": "addListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 597,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 209,
									"name": "addListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Alias for "
											},
											{
												"kind": "code",
												"text": "`emitter.on(eventName, listener)`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 597,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 210,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 211,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 212,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 213,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"signatures": [
														{
															"id": 214,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 117,
																	"character": 42
																}
															],
															"parameters": [
																{
																	"id": 215,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.addListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.addListener"
							}
						},
						{
							"id": 67,
							"name": "connect",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 23,
									"character": 7,
									"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/client/XernerxClient.ts#L23"
								}
							],
							"signatures": [
								{
									"id": 68,
									"name": "connect",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/client/XernerxClient.ts",
											"line": 23,
											"character": 7,
											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/client/XernerxClient.ts#L23"
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 93,
							"name": "deleteWebhook",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1024,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 94,
									"name": "deleteWebhook",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1024,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 95,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 96,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "WebhookDeleteOptions"
												},
												"name": "WebhookDeleteOptions",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.deleteWebhook"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.deleteWebhook"
							}
						},
						{
							"id": 91,
							"name": "destroy",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1023,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 92,
									"name": "destroy",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1023,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.destroy"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.destroy"
							}
						},
						{
							"id": 168,
							"name": "emit",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1053,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1054,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 169,
									"name": "emit",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Synchronously calls each of the listeners registered for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
											},
											{
												"kind": "code",
												"text": "`true`"
											},
											{
												"kind": "text",
												"text": " if the event had listeners, "
											},
											{
												"kind": "code",
												"text": "`false`"
											},
											{
												"kind": "text",
												"text": " otherwise.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1053,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 170,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 171,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 170,
												"name": "Event",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 172,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "indexedAccess",
												"indexType": {
													"type": "reference",
													"target": 170,
													"name": "Event",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"objectType": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.emit"
									}
								},
								{
									"id": 173,
									"name": "emit",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1054,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 174,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 175,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Exclude"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 174,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													{
														"type": "typeOperator",
														"operator": "keyof",
														"target": {
															"type": "reference",
															"target": {
																"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
																"qualifiedName": "ClientEvents"
															},
															"name": "ClientEvents",
															"package": "discord.js"
														}
													}
												],
												"name": "Exclude",
												"package": "typescript"
											}
										},
										{
											"id": 176,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.emit"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.emit"
							}
						},
						{
							"id": 258,
							"name": "eventNames",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 922,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 259,
									"name": "eventNames",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
											},
											{
												"kind": "code",
												"text": "`Symbol`"
											},
											{
												"kind": "text",
												"text": "s.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 922,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "intrinsic",
													"name": "symbol"
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.eventNames"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.eventNames"
							}
						},
						{
							"id": 97,
							"name": "fetchGuildPreview",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1025,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 98,
									"name": "fetchGuildPreview",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1025,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 99,
											"name": "guild",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "GuildResolvable"
												},
												"name": "GuildResolvable",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "GuildPreview"
												},
												"name": "GuildPreview",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchGuildPreview"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchGuildPreview"
							}
						},
						{
							"id": 104,
							"name": "fetchGuildTemplate",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1027,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 105,
									"name": "fetchGuildTemplate",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1027,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 106,
											"name": "template",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "GuildTemplate"
												},
												"name": "GuildTemplate",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchGuildTemplate"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchGuildTemplate"
							}
						},
						{
							"id": 125,
							"name": "fetchGuildWidget",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1035,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 126,
									"name": "fetchGuildWidget",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1035,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 127,
											"name": "guild",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "GuildResolvable"
												},
												"name": "GuildResolvable",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "Widget"
												},
												"name": "Widget",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchGuildWidget"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchGuildWidget"
							}
						},
						{
							"id": 100,
							"name": "fetchInvite",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1026,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 101,
									"name": "fetchInvite",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1026,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 102,
											"name": "invite",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 103,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "ClientFetchInviteOptions"
												},
												"name": "ClientFetchInviteOptions",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "Invite"
												},
												"name": "Invite",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchInvite"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchInvite"
							}
						},
						{
							"id": 119,
							"name": "fetchPremiumStickerPacks",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1033,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 120,
									"name": "fetchPremiumStickerPacks",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [],
										"blockTags": [
											{
												"tag": "@deprecated",
												"content": [
													{
														"kind": "text",
														"text": "Use "
													},
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "Client.fetchStickerPacks",
														"target": {
															"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
															"qualifiedName": "Client.fetchStickerPacks"
														}
													},
													{
														"kind": "text",
														"text": " instead."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1033,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@discordjs/collection/dist/index.d.ts",
													"qualifiedName": "Collection"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
															"qualifiedName": "StickerPack"
														},
														"name": "StickerPack",
														"package": "discord.js"
													}
												],
												"name": "Collection",
												"package": "@discordjs/collection"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchPremiumStickerPacks"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchPremiumStickerPacks"
							}
						},
						{
							"id": 109,
							"name": "fetchSticker",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1029,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 110,
									"name": "fetchSticker",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1029,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 111,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "Sticker"
												},
												"name": "Sticker",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchSticker"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchSticker"
							}
						},
						{
							"id": 112,
							"name": "fetchStickerPacks",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1030,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1031,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 113,
									"name": "fetchStickerPacks",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1030,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 114,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 115,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 116,
															"name": "packId",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1030,
																	"character": 38
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [116]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1030,
															"character": 36
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "StickerPack"
												},
												"name": "StickerPack",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchStickerPacks"
									}
								},
								{
									"id": 117,
									"name": "fetchStickerPacks",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1031,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 118,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "StickerPackFetchOptions"
												},
												"name": "StickerPackFetchOptions",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@discordjs/collection/dist/index.d.ts",
													"qualifiedName": "Collection"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
															"qualifiedName": "StickerPack"
														},
														"name": "StickerPack",
														"package": "discord.js"
													}
												],
												"name": "Collection",
												"package": "@discordjs/collection"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchStickerPacks"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchStickerPacks"
							}
						},
						{
							"id": 107,
							"name": "fetchVoiceRegions",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1028,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 108,
									"name": "fetchVoiceRegions",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1028,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@discordjs/collection/dist/index.d.ts",
													"qualifiedName": "Collection"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
															"qualifiedName": "VoiceRegion"
														},
														"name": "VoiceRegion",
														"package": "discord.js"
													}
												],
												"name": "Collection",
												"package": "@discordjs/collection"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchVoiceRegions"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchVoiceRegions"
							}
						},
						{
							"id": 121,
							"name": "fetchWebhook",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1034,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 122,
									"name": "fetchWebhook",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1034,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 123,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 124,
											"name": "token",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "Webhook"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/discord.js/node_modules/discord-api-types/payloads/v10/webhook.ts",
															"qualifiedName": "WebhookType"
														},
														"name": "WebhookType",
														"package": "discord-api-types"
													}
												],
												"name": "Webhook",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchWebhook"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchWebhook"
							}
						},
						{
							"id": 128,
							"name": "generateInvite",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1036,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 129,
									"name": "generateInvite",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1036,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 130,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "InviteGenerationOptions"
												},
												"name": "InviteGenerationOptions",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.generateInvite"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.generateInvite"
							}
						},
						{
							"id": 227,
							"name": "getMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 774,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 228,
									"name": "getMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the current max listener value for the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " which is either\nset by "
											},
											{
												"kind": "code",
												"text": "`emitter.setMaxListeners(n)`"
											},
											{
												"kind": "text",
												"text": " or defaults to "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "defaultMaxListeners",
												"target": 46
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v1.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 774,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.getMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.getMaxListeners"
							}
						},
						{
							"id": 134,
							"name": "isReady",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1038,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 135,
									"name": "isReady",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1038,
											"character": 9
										}
									],
									"type": {
										"type": "predicate",
										"name": "this",
										"asserts": false,
										"targetType": {
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
												"qualifiedName": "Client"
											},
											"typeArguments": [
												{
													"type": "literal",
													"value": true
												}
											],
											"name": "Client",
											"package": "discord.js"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.isReady"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.isReady"
							}
						},
						{
							"id": 237,
							"name": "listenerCount",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 868,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 238,
									"name": "listenerCount",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the number of listeners listening for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\nIf "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " is provided, it will return how many times the listener is found\nin the list of the listeners of the event."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v3.2.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 868,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 239,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 240,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event being listened for"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 241,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The event handler function"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Function"
												},
												"name": "Function",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.listenerCount"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.listenerCount"
							}
						},
						{
							"id": 229,
							"name": "listeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 787,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 230,
									"name": "listeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 787,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 231,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 232,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.listeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.listeners"
							}
						},
						{
							"id": 131,
							"name": "login",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1037,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 132,
									"name": "login",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1037,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 133,
											"name": "token",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.login"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.login"
							}
						},
						{
							"id": 177,
							"name": "off",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1056,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1057,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 178,
									"name": "off",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Alias for "
											},
											{
												"kind": "code",
												"text": "`emitter.removeListener()`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v10.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1056,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 179,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 180,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 179,
												"name": "Event",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 181,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 182,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1056,
															"character": 71
														}
													],
													"signatures": [
														{
															"id": 183,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1056,
																	"character": 71
																}
															],
															"parameters": [
																{
																	"id": 184,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "indexedAccess",
																		"indexType": {
																			"type": "reference",
																			"target": 179,
																			"name": "Event",
																			"package": "discord.js",
																			"refersToTypeParameter": true
																		},
																		"objectType": {
																			"type": "reference",
																			"target": {
																				"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
																				"qualifiedName": "ClientEvents"
																			},
																			"name": "ClientEvents",
																			"package": "discord.js"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.off"
									}
								},
								{
									"id": 185,
									"name": "off",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1057,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 186,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 187,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Exclude"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 186,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													{
														"type": "typeOperator",
														"operator": "keyof",
														"target": {
															"type": "reference",
															"target": {
																"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
																"qualifiedName": "ClientEvents"
															},
															"name": "ClientEvents",
															"package": "discord.js"
														}
													}
												],
												"name": "Exclude",
												"package": "typescript"
											}
										},
										{
											"id": 188,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 189,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1059,
															"character": 14
														}
													],
													"signatures": [
														{
															"id": 190,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1059,
																	"character": 14
																}
															],
															"parameters": [
																{
																	"id": 191,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.off"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.off"
							}
						},
						{
							"id": 138,
							"name": "on",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1041,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1042,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 139,
									"name": "on",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function to the end of the listeners array for the event\nnamed "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ". No checks are made to see if the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " has already\nbeen added. Multiple calls passing the same combination of "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " and\n"
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " will result in the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " being added, and called, multiple times.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The "
											},
											{
												"kind": "code",
												"text": "`emitter.prependListener()`"
											},
											{
												"kind": "text",
												"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.101"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1041,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 140,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 141,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 140,
												"name": "Event",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 142,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 143,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1041,
															"character": 70
														}
													],
													"signatures": [
														{
															"id": 144,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1041,
																	"character": 70
																}
															],
															"parameters": [
																{
																	"id": 145,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "indexedAccess",
																		"indexType": {
																			"type": "reference",
																			"target": 140,
																			"name": "Event",
																			"package": "discord.js",
																			"refersToTypeParameter": true
																		},
																		"objectType": {
																			"type": "reference",
																			"target": {
																				"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
																				"qualifiedName": "ClientEvents"
																			},
																			"name": "ClientEvents",
																			"package": "discord.js"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.on"
									}
								},
								{
									"id": 146,
									"name": "on",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1042,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 147,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 148,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Exclude"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 147,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													{
														"type": "typeOperator",
														"operator": "keyof",
														"target": {
															"type": "reference",
															"target": {
																"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
																"qualifiedName": "ClientEvents"
															},
															"name": "ClientEvents",
															"package": "discord.js"
														}
													}
												],
												"name": "Exclude",
												"package": "typescript"
											}
										},
										{
											"id": 149,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 150,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1044,
															"character": 14
														}
													],
													"signatures": [
														{
															"id": 151,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1044,
																	"character": 14
																}
															],
															"parameters": [
																{
																	"id": 152,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.on"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.on"
							}
						},
						{
							"id": 153,
							"name": "once",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1047,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1048,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 154,
									"name": "once",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a **one-time** "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ". The\nnext time "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " is triggered, this listener is removed and then invoked.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The "
											},
											{
												"kind": "code",
												"text": "`emitter.prependOnceListener()`"
											},
											{
												"kind": "text",
												"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.3.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1047,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 155,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 156,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 155,
												"name": "Event",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 157,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 158,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1047,
															"character": 72
														}
													],
													"signatures": [
														{
															"id": 159,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1047,
																	"character": 72
																}
															],
															"parameters": [
																{
																	"id": 160,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "indexedAccess",
																		"indexType": {
																			"type": "reference",
																			"target": 155,
																			"name": "Event",
																			"package": "discord.js",
																			"refersToTypeParameter": true
																		},
																		"objectType": {
																			"type": "reference",
																			"target": {
																				"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
																				"qualifiedName": "ClientEvents"
																			},
																			"name": "ClientEvents",
																			"package": "discord.js"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.once"
									}
								},
								{
									"id": 161,
									"name": "once",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1048,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 162,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 163,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Exclude"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 162,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													{
														"type": "typeOperator",
														"operator": "keyof",
														"target": {
															"type": "reference",
															"target": {
																"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
																"qualifiedName": "ClientEvents"
															},
															"name": "ClientEvents",
															"package": "discord.js"
														}
													}
												],
												"name": "Exclude",
												"package": "typescript"
											}
										},
										{
											"id": 164,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 165,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1050,
															"character": 14
														}
													],
													"signatures": [
														{
															"id": 166,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1050,
																	"character": 14
																}
															],
															"parameters": [
																{
																	"id": 167,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.once"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.once"
							}
						},
						{
							"id": 242,
							"name": "prependListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 886,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 243,
									"name": "prependListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function to the _beginning_ of the listeners array for the\nevent named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ". No checks are made to see if the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " has\nalready been added. Multiple calls passing the same combination of "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": "\nand "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " will result in the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " being added, and called, multiple times.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 886,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 244,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 245,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 246,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 247,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"signatures": [
														{
															"id": 248,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 117,
																	"character": 42
																}
															],
															"parameters": [
																{
																	"id": 249,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.prependListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.prependListener"
							}
						},
						{
							"id": 250,
							"name": "prependOnceListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 902,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 251,
									"name": "prependOnceListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a **one-time**"
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " to the _beginning_ of the listeners array. The next time "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 902,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 252,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 253,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 254,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 255,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"signatures": [
														{
															"id": 256,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 117,
																	"character": 42
																}
															],
															"parameters": [
																{
																	"id": 257,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.prependOnceListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.prependOnceListener"
							}
						},
						{
							"id": 233,
							"name": "rawListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 818,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 234,
									"name": "rawListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ",\nincluding any wrappers (such as those created by "
											},
											{
												"kind": "code",
												"text": "`.once()`"
											},
											{
												"kind": "text",
												"text": ").\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v9.4.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 818,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 235,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 236,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.rawListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.rawListeners"
							}
						},
						{
							"id": 192,
							"name": "removeAllListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1062,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1063,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 193,
									"name": "removeAllListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Removes all listeners, or those of the specified "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1062,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 194,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 195,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": 194,
												"name": "Event",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.removeAllListeners"
									}
								},
								{
									"id": 196,
									"name": "removeAllListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1063,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 197,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 198,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Exclude"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 197,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													{
														"type": "typeOperator",
														"operator": "keyof",
														"target": {
															"type": "reference",
															"target": {
																"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
																"qualifiedName": "ClientEvents"
															},
															"name": "ClientEvents",
															"package": "discord.js"
														}
													}
												],
												"name": "Exclude",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.removeAllListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.removeAllListeners"
							}
						},
						{
							"id": 216,
							"name": "removeListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 742,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 217,
									"name": "removeListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Removes the specified "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " from the listener array for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
											},
											{
												"kind": "text",
												"text": "\n\n"
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ", then "
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any "
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`removeAllListeners()`"
											},
											{
												"kind": "text",
												"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
											},
											{
												"kind": "code",
												"text": "`emit()`"
											},
											{
												"kind": "text",
												"text": " in progress. Subsequent events behave as expected.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
											},
											{
												"kind": "code",
												"text": "`emitter.listeners()`"
											},
											{
												"kind": "text",
												"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " will remove the most\nrecently added instance. In the example the "
											},
											{
												"kind": "code",
												"text": "`once('ping')`"
											},
											{
												"kind": "text",
												"text": " listener is removed:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 742,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 218,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 219,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 220,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 221,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"signatures": [
														{
															"id": 222,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 117,
																	"character": 42
																}
															],
															"parameters": [
																{
																	"id": 223,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.removeListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.removeListener"
							}
						},
						{
							"id": 224,
							"name": "setMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 768,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 225,
									"name": "setMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "By default "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": "s will print a warning if more than "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
											},
											{
												"kind": "code",
												"text": "`emitter.setMaxListeners()`"
											},
											{
												"kind": "text",
												"text": " method allows the limit to be\nmodified for this specific "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " instance. The value can be set to "
											},
											{
												"kind": "code",
												"text": "`Infinity`"
											},
											{
												"kind": "text",
												"text": " (or "
											},
											{
												"kind": "code",
												"text": "`0`"
											},
											{
												"kind": "text",
												"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.3.5"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 768,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 226,
											"name": "n",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.setMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.setMaxListeners"
							}
						},
						{
							"id": 136,
							"name": "toJSON",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1039,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 137,
									"name": "toJSON",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1039,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.toJSON"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.toJSON"
							}
						},
						{
							"id": 36,
							"name": "addAbortListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 437,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 37,
									"name": "addAbortListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Listens once to the "
											},
											{
												"kind": "code",
												"text": "`abort`"
											},
											{
												"kind": "text",
												"text": " event on the provided "
											},
											{
												"kind": "code",
												"text": "`signal`"
											},
											{
												"kind": "text",
												"text": ".\n\nListening to the "
											},
											{
												"kind": "code",
												"text": "`abort`"
											},
											{
												"kind": "text",
												"text": " event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall "
											},
											{
												"kind": "code",
												"text": "`e.stopImmediatePropagation()`"
											},
											{
												"kind": "text",
												"text": ". Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using "
											},
											{
												"kind": "code",
												"text": "`AbortSignal`"
											},
											{
												"kind": "text",
												"text": "s in Node.js APIs by solving these\ntwo issues by listening to the event such that "
											},
											{
												"kind": "code",
												"text": "`stopImmediatePropagation`"
											},
											{
												"kind": "text",
												"text": " does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v20.5.0"
													}
												]
											},
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Disposable that removes the "
													},
													{
														"kind": "code",
														"text": "`abort`"
													},
													{
														"kind": "text",
														"text": " listener."
													}
												]
											}
										],
										"modifierTags": ["@experimental"]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 437,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 38,
											"name": "signal",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/globals.d.ts",
													"qualifiedName": "__global.AbortSignal"
												},
												"name": "AbortSignal",
												"package": "@types/node",
												"qualifiedName": "__global.AbortSignal"
											}
										},
										{
											"id": 39,
											"name": "resource",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 40,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 437,
															"character": 63
														}
													],
													"signatures": [
														{
															"id": 41,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 437,
																	"character": 63
																}
															],
															"parameters": [
																{
																	"id": 42,
																	"name": "event",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/@types/node/dom-events.d.ts",
																			"qualifiedName": "__global.Event"
																		},
																		"name": "Event",
																		"package": "@types/node",
																		"qualifiedName": "__global.Event"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.esnext.disposable.d.ts",
											"qualifiedName": "Disposable"
										},
										"name": "Disposable",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.addAbortListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.addAbortListener"
							}
						},
						{
							"id": 25,
							"name": "getEventListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 358,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 26,
									"name": "getEventListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": "s this behaves exactly the same as calling "
											},
											{
												"kind": "code",
												"text": "`.listeners`"
											},
											{
												"kind": "text",
												"text": " on\nthe emitter.\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v15.2.0, v14.17.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 358,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 27,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@types/node/events.d.ts",
															"qualifiedName": "__global.NodeJS.EventEmitter"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/@types/node/events.d.ts",
																	"qualifiedName": "DefaultEventMap"
																},
																"name": "DefaultEventMap",
																"package": "@types/node"
															}
														],
														"name": "EventEmitter",
														"package": "@types/node",
														"qualifiedName": "__global.NodeJS.EventEmitter"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@types/node/dom-events.d.ts",
															"qualifiedName": "__global.EventTarget"
														},
														"name": "EventTarget",
														"package": "@types/node",
														"qualifiedName": "__global.EventTarget"
													}
												]
											}
										},
										{
											"id": 28,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.getEventListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.getEventListeners"
							}
						},
						{
							"id": 29,
							"name": "getMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 387,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 30,
									"name": "getMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the currently set max amount of listeners.\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": "s this behaves exactly the same as calling "
											},
											{
												"kind": "code",
												"text": "`.getMaxListeners`"
											},
											{
												"kind": "text",
												"text": " on\nthe emitter.\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": "s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v19.9.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 387,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 31,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@types/node/events.d.ts",
															"qualifiedName": "__global.NodeJS.EventEmitter"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/@types/node/events.d.ts",
																	"qualifiedName": "DefaultEventMap"
																},
																"name": "DefaultEventMap",
																"package": "@types/node"
															}
														],
														"name": "EventEmitter",
														"package": "@types/node",
														"qualifiedName": "__global.NodeJS.EventEmitter"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@types/node/dom-events.d.ts",
															"qualifiedName": "__global.EventTarget"
														},
														"name": "EventTarget",
														"package": "@types/node",
														"qualifiedName": "__global.EventTarget"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.getMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.getMaxListeners"
							}
						},
						{
							"id": 21,
							"name": "listenerCount",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 330,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 22,
									"name": "listenerCount",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A class method that returns the number of listeners for the given "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " registered on the given "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											},
											{
												"kind": "text",
												"text": ".\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.9.12"
													}
												]
											},
											{
												"tag": "@deprecated",
												"content": [
													{
														"kind": "text",
														"text": "Since v3.2.0 - Use "
													},
													{
														"kind": "code",
														"text": "`listenerCount`"
													},
													{
														"kind": "text",
														"text": " instead."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 330,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 23,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The emitter to query"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@types/node/events.d.ts",
															"qualifiedName": "DefaultEventMap"
														},
														"name": "DefaultEventMap",
														"package": "@types/node"
													}
												],
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											}
										},
										{
											"id": 24,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The event name"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.listenerCount"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.listenerCount"
							}
						},
						{
							"id": 12,
							"name": "on",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1002,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 13,
									"name": "on",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns an "
											},
											{
												"kind": "code",
												"text": "`AsyncIterator`"
											},
											{
												"kind": "text",
												"text": " that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events. It will throw\nif the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " emits "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": ". It removes all listeners when\nexiting the loop. The "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
											},
											{
												"kind": "code",
												"text": "`AbortSignal`"
											},
											{
												"kind": "text",
												"text": " can be used to cancel waiting on events:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
											},
											{
												"kind": "text",
												"text": "\n\nUse the "
											},
											{
												"kind": "code",
												"text": "`close`"
											},
											{
												"kind": "text",
												"text": " option to specify an array of event names that will end the iteration:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n  ee.emit('close');\n});\n\nfor await (const event of on(ee, 'foo', { close: ['close'] })) {\n  console.log(event); // prints ['bar'] [42]\n}\n// the loop will exit after 'close' is emitted\nconsole.log('done'); // prints 'done'\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v13.6.0, v12.16.0"
													}
												]
											},
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "An "
													},
													{
														"kind": "code",
														"text": "`AsyncIterator`"
													},
													{
														"kind": "text",
														"text": " that iterates "
													},
													{
														"kind": "code",
														"text": "`eventName`"
													},
													{
														"kind": "text",
														"text": " events emitted by the "
													},
													{
														"kind": "code",
														"text": "`emitter`"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1002,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 14,
											"name": "Emitter",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/events.d.ts",
													"qualifiedName": "EventEmitter"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@types/node/events.d.ts",
															"qualifiedName": "DefaultEventMap"
														},
														"name": "DefaultEventMap",
														"package": "@types/node"
													}
												],
												"name": "EventEmitter",
												"package": "@types/node"
											}
										},
										{
											"id": 15,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 16,
											"name": "eventEmitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 14,
												"name": "Emitter",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 17,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "conditional",
												"checkType": {
													"type": "reference",
													"target": 14,
													"name": "Emitter",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"extendsType": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "Client"
													},
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "boolean"
														}
													],
													"name": "Client",
													"package": "discord.js"
												},
												"trueType": {
													"type": "reference",
													"target": 15,
													"name": "Event",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"falseType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "intrinsic",
															"name": "symbol"
														}
													]
												}
											}
										},
										{
											"id": 18,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 19,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 20,
															"name": "signal",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1005,
																	"character": 16
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/@types/node/globals.d.ts",
																	"qualifiedName": "__global.AbortSignal"
																},
																"name": "AbortSignal",
																"package": "@types/node",
																"qualifiedName": "__global.AbortSignal"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [20]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1005,
															"character": 14
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
											"qualifiedName": "AsyncIterableIterator"
										},
										"typeArguments": [
											{
												"type": "conditional",
												"checkType": {
													"type": "reference",
													"target": 14,
													"name": "Emitter",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"extendsType": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "Client"
													},
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "boolean"
														}
													],
													"name": "Client",
													"package": "discord.js"
												},
												"trueType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "reference",
														"target": 15,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													"objectType": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
															"qualifiedName": "ClientEvents"
														},
														"name": "ClientEvents",
														"package": "discord.js"
													}
												},
												"falseType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "AsyncIterableIterator",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.on"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.on"
							}
						},
						{
							"id": 3,
							"name": "once",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 997,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 4,
									"name": "once",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Override inherited static EventEmitter methods, with added type checks for Client events."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 997,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 5,
											"name": "Emitter",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/events.d.ts",
													"qualifiedName": "EventEmitter"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@types/node/events.d.ts",
															"qualifiedName": "DefaultEventMap"
														},
														"name": "DefaultEventMap",
														"package": "@types/node"
													}
												],
												"name": "EventEmitter",
												"package": "@types/node"
											}
										},
										{
											"id": 6,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 7,
											"name": "eventEmitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 5,
												"name": "Emitter",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 8,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "conditional",
												"checkType": {
													"type": "reference",
													"target": 5,
													"name": "Emitter",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"extendsType": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "Client"
													},
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "boolean"
														}
													],
													"name": "Client",
													"package": "discord.js"
												},
												"trueType": {
													"type": "reference",
													"target": 6,
													"name": "Event",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"falseType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "intrinsic",
															"name": "symbol"
														}
													]
												}
											}
										},
										{
											"id": 9,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 10,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 11,
															"name": "signal",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1000,
																	"character": 16
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/@types/node/globals.d.ts",
																	"qualifiedName": "__global.AbortSignal"
																},
																"name": "AbortSignal",
																"package": "@types/node",
																"qualifiedName": "__global.AbortSignal"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [11]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1000,
															"character": 14
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "conditional",
												"checkType": {
													"type": "reference",
													"target": 5,
													"name": "Emitter",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"extendsType": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "Client"
													},
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "boolean"
														}
													],
													"name": "Client",
													"package": "discord.js"
												},
												"trueType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "reference",
														"target": 6,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													"objectType": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
															"qualifiedName": "ClientEvents"
														},
														"name": "ClientEvents",
														"package": "discord.js"
													}
												},
												"falseType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.once"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.once"
							}
						},
						{
							"id": 32,
							"name": "setMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 402,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 33,
									"name": "setMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "code",
												"text": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v15.4.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 402,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 34,
											"name": "n",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A non-negative number. The maximum number of listeners per "
													},
													{
														"kind": "code",
														"text": "`EventTarget`"
													},
													{
														"kind": "text",
														"text": " event."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 35,
											"name": "eventTargets",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"target": {
																"sourceFileName": "node_modules/@types/node/events.d.ts",
																"qualifiedName": "__global.NodeJS.EventEmitter"
															},
															"typeArguments": [
																{
																	"type": "reference",
																	"target": {
																		"sourceFileName": "node_modules/@types/node/events.d.ts",
																		"qualifiedName": "DefaultEventMap"
																	},
																	"name": "DefaultEventMap",
																	"package": "@types/node"
																}
															],
															"name": "EventEmitter",
															"package": "@types/node",
															"qualifiedName": "__global.NodeJS.EventEmitter"
														},
														{
															"type": "reference",
															"target": {
																"sourceFileName": "node_modules/@types/node/dom-events.d.ts",
																"qualifiedName": "__global.EventTarget"
															},
															"name": "EventTarget",
															"package": "@types/node",
															"qualifiedName": "__global.EventTarget"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.setMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.setMaxListeners"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [47]
						},
						{
							"title": "Properties",
							"children": [71, 72, 75, 76, 81, 199, 54, 83, 82, 84, 87, 88, 89, 90, 45, 44, 46, 43]
						},
						{
							"title": "Accessors",
							"children": [73, 79, 85]
						},
						{
							"title": "Methods",
							"children": [
								200, 202, 208, 67, 93, 91, 168, 258, 97, 104, 125, 100, 119, 109, 112, 107, 121, 128, 227, 134, 237, 229, 131, 177, 138, 153, 242, 250, 233, 192, 216, 224, 136, 36, 25, 29, 21, 12, 3,
								32
							]
						}
					],
					"sources": [
						{
							"fileName": "src/client/XernerxClient.ts",
							"line": 10,
							"character": 13,
							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/client/XernerxClient.ts#L10"
						}
					],
					"typeParameters": [
						{
							"id": 260,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "reflection",
								"declaration": {
									"id": 261,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "src/client/XernerxClient.ts",
											"line": 10,
											"character": 31,
											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/client/XernerxClient.ts#L10"
										}
									]
								}
							}
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
								"qualifiedName": "Client"
							},
							"name": "Client",
							"package": "discord.js"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [2]
				}
			],
			"sources": [
				{
					"fileName": "src/client/XernerxClient.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/client/XernerxClient.ts#L1"
				}
			]
		},
		{
			"id": 262,
			"name": "function/init",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 263,
					"name": "init",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "src/function/init.ts",
							"line": 8,
							"character": 16,
							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/function/init.ts#L8"
						}
					],
					"signatures": [
						{
							"id": 264,
							"name": "init",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "src/function/init.ts",
									"line": 8,
									"character": 16,
									"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/function/init.ts#L8"
								}
							],
							"parameters": [
								{
									"id": 265,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 2,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 266,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										],
										"name": "XernerxClient",
										"package": "xernerx"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [263]
				}
			],
			"sources": [
				{
					"fileName": "src/function/init.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/function/init.ts#L1"
				}
			]
		},
		{
			"id": 267,
			"name": "schema/XernerxOptions",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 268,
					"name": "XernerxOptionsSchema",
					"variant": "declaration",
					"kind": 32,
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/schema/XernerxOptions.ts",
							"line": 5,
							"character": 13,
							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L5"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 269,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 271,
									"name": "debug",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "optional settings\ndev"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/schema/XernerxOptions.ts",
											"line": 11,
											"character": 1,
											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L11"
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/zod/lib/types.d.ts",
											"qualifiedName": "ZodDefault"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/zod/lib/types.d.ts",
													"qualifiedName": "ZodBoolean"
												},
												"name": "ZodBoolean",
												"package": "zod"
											}
										],
										"name": "ZodDefault",
										"package": "zod"
									},
									"defaultValue": "..."
								},
								{
									"id": 272,
									"name": "log",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "setup"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/schema/XernerxOptions.ts",
											"line": 14,
											"character": 1,
											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L14"
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/zod/lib/types.d.ts",
											"qualifiedName": "ZodDefault"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/zod/lib/types.d.ts",
													"qualifiedName": "ZodObject"
												},
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 273,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"children": [
																{
																	"id": 275,
																	"name": "levels",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/schema/XernerxOptions.ts",
																			"line": 17,
																			"character": 3,
																			"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L17"
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/zod/lib/types.d.ts",
																			"qualifiedName": "ZodDefault"
																		},
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": {
																					"sourceFileName": "node_modules/zod/lib/types.d.ts",
																					"qualifiedName": "ZodObject"
																				},
																				"typeArguments": [
																					{
																						"type": "reflection",
																						"declaration": {
																							"id": 276,
																							"name": "__type",
																							"variant": "declaration",
																							"kind": 65536,
																							"flags": {},
																							"children": [
																								{
																									"id": 280,
																									"name": "debug",
																									"variant": "declaration",
																									"kind": 1024,
																									"flags": {},
																									"sources": [
																										{
																											"fileName": "src/schema/XernerxOptions.ts",
																											"line": 22,
																											"character": 5,
																											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L22"
																										}
																									],
																									"type": {
																										"type": "reference",
																										"target": {
																											"sourceFileName": "node_modules/zod/lib/types.d.ts",
																											"qualifiedName": "ZodDefault"
																										},
																										"typeArguments": [
																											{
																												"type": "reference",
																												"target": {
																													"sourceFileName": "node_modules/zod/lib/types.d.ts",
																													"qualifiedName": "ZodBoolean"
																												},
																												"name": "ZodBoolean",
																												"package": "zod"
																											}
																										],
																										"name": "ZodDefault",
																										"package": "zod"
																									},
																									"defaultValue": "..."
																								},
																								{
																									"id": 277,
																									"name": "error",
																									"variant": "declaration",
																									"kind": 1024,
																									"flags": {},
																									"sources": [
																										{
																											"fileName": "src/schema/XernerxOptions.ts",
																											"line": 19,
																											"character": 5,
																											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L19"
																										}
																									],
																									"type": {
																										"type": "reference",
																										"target": {
																											"sourceFileName": "node_modules/zod/lib/types.d.ts",
																											"qualifiedName": "ZodDefault"
																										},
																										"typeArguments": [
																											{
																												"type": "reference",
																												"target": {
																													"sourceFileName": "node_modules/zod/lib/types.d.ts",
																													"qualifiedName": "ZodBoolean"
																												},
																												"name": "ZodBoolean",
																												"package": "zod"
																											}
																										],
																										"name": "ZodDefault",
																										"package": "zod"
																									},
																									"defaultValue": "..."
																								},
																								{
																									"id": 279,
																									"name": "info",
																									"variant": "declaration",
																									"kind": 1024,
																									"flags": {},
																									"sources": [
																										{
																											"fileName": "src/schema/XernerxOptions.ts",
																											"line": 21,
																											"character": 5,
																											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L21"
																										}
																									],
																									"type": {
																										"type": "reference",
																										"target": {
																											"sourceFileName": "node_modules/zod/lib/types.d.ts",
																											"qualifiedName": "ZodDefault"
																										},
																										"typeArguments": [
																											{
																												"type": "reference",
																												"target": {
																													"sourceFileName": "node_modules/zod/lib/types.d.ts",
																													"qualifiedName": "ZodBoolean"
																												},
																												"name": "ZodBoolean",
																												"package": "zod"
																											}
																										],
																										"name": "ZodDefault",
																										"package": "zod"
																									},
																									"defaultValue": "..."
																								},
																								{
																									"id": 278,
																									"name": "warn",
																									"variant": "declaration",
																									"kind": 1024,
																									"flags": {},
																									"sources": [
																										{
																											"fileName": "src/schema/XernerxOptions.ts",
																											"line": 20,
																											"character": 5,
																											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L20"
																										}
																									],
																									"type": {
																										"type": "reference",
																										"target": {
																											"sourceFileName": "node_modules/zod/lib/types.d.ts",
																											"qualifiedName": "ZodDefault"
																										},
																										"typeArguments": [
																											{
																												"type": "reference",
																												"target": {
																													"sourceFileName": "node_modules/zod/lib/types.d.ts",
																													"qualifiedName": "ZodBoolean"
																												},
																												"name": "ZodBoolean",
																												"package": "zod"
																											}
																										],
																										"name": "ZodDefault",
																										"package": "zod"
																									},
																									"defaultValue": "..."
																								}
																							],
																							"groups": [
																								{
																									"title": "Properties",
																									"children": [280, 277, 279, 278]
																								}
																							],
																							"sources": [
																								{
																									"fileName": "src/schema/XernerxOptions.ts",
																									"line": 18,
																									"character": 12,
																									"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L18"
																								}
																							]
																						}
																					},
																					{
																						"type": "literal",
																						"value": "strip"
																					},
																					{
																						"type": "reference",
																						"target": {
																							"sourceFileName": "node_modules/zod/lib/types.d.ts",
																							"qualifiedName": "ZodTypeAny"
																						},
																						"name": "ZodTypeAny",
																						"package": "zod"
																					},
																					{
																						"type": "reflection",
																						"declaration": {
																							"id": 281,
																							"name": "__type",
																							"variant": "declaration",
																							"kind": 65536,
																							"flags": {},
																							"children": [
																								{
																									"id": 285,
																									"name": "debug",
																									"variant": "declaration",
																									"kind": 1024,
																									"flags": {},
																									"sources": [
																										{
																											"fileName": "src/schema/XernerxOptions.ts",
																											"line": 22,
																											"character": 5,
																											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L22"
																										}
																									],
																									"type": {
																										"type": "intrinsic",
																										"name": "boolean"
																									},
																									"defaultValue": "..."
																								},
																								{
																									"id": 282,
																									"name": "error",
																									"variant": "declaration",
																									"kind": 1024,
																									"flags": {},
																									"sources": [
																										{
																											"fileName": "src/schema/XernerxOptions.ts",
																											"line": 19,
																											"character": 5,
																											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L19"
																										}
																									],
																									"type": {
																										"type": "intrinsic",
																										"name": "boolean"
																									},
																									"defaultValue": "..."
																								},
																								{
																									"id": 284,
																									"name": "info",
																									"variant": "declaration",
																									"kind": 1024,
																									"flags": {},
																									"sources": [
																										{
																											"fileName": "src/schema/XernerxOptions.ts",
																											"line": 21,
																											"character": 5,
																											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L21"
																										}
																									],
																									"type": {
																										"type": "intrinsic",
																										"name": "boolean"
																									},
																									"defaultValue": "..."
																								},
																								{
																									"id": 283,
																									"name": "warn",
																									"variant": "declaration",
																									"kind": 1024,
																									"flags": {},
																									"sources": [
																										{
																											"fileName": "src/schema/XernerxOptions.ts",
																											"line": 20,
																											"character": 5,
																											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L20"
																										}
																									],
																									"type": {
																										"type": "intrinsic",
																										"name": "boolean"
																									},
																									"defaultValue": "..."
																								}
																							],
																							"groups": [
																								{
																									"title": "Properties",
																									"children": [285, 282, 284, 283]
																								}
																							],
																							"sources": [
																								{
																									"fileName": "node_modules/zod/lib/types.d.ts",
																									"line": 1056,
																									"character": 123
																								}
																							]
																						}
																					},
																					{
																						"type": "reflection",
																						"declaration": {
																							"id": 286,
																							"name": "__type",
																							"variant": "declaration",
																							"kind": 65536,
																							"flags": {},
																							"children": [
																								{
																									"id": 290,
																									"name": "debug",
																									"variant": "declaration",
																									"kind": 1024,
																									"flags": {
																										"isOptional": true
																									},
																									"sources": [
																										{
																											"fileName": "src/schema/XernerxOptions.ts",
																											"line": 22,
																											"character": 5,
																											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L22"
																										}
																									],
																									"type": {
																										"type": "intrinsic",
																										"name": "boolean"
																									},
																									"defaultValue": "..."
																								},
																								{
																									"id": 287,
																									"name": "error",
																									"variant": "declaration",
																									"kind": 1024,
																									"flags": {
																										"isOptional": true
																									},
																									"sources": [
																										{
																											"fileName": "src/schema/XernerxOptions.ts",
																											"line": 19,
																											"character": 5,
																											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L19"
																										}
																									],
																									"type": {
																										"type": "intrinsic",
																										"name": "boolean"
																									},
																									"defaultValue": "..."
																								},
																								{
																									"id": 289,
																									"name": "info",
																									"variant": "declaration",
																									"kind": 1024,
																									"flags": {
																										"isOptional": true
																									},
																									"sources": [
																										{
																											"fileName": "src/schema/XernerxOptions.ts",
																											"line": 21,
																											"character": 5,
																											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L21"
																										}
																									],
																									"type": {
																										"type": "intrinsic",
																										"name": "boolean"
																									},
																									"defaultValue": "..."
																								},
																								{
																									"id": 288,
																									"name": "warn",
																									"variant": "declaration",
																									"kind": 1024,
																									"flags": {
																										"isOptional": true
																									},
																									"sources": [
																										{
																											"fileName": "src/schema/XernerxOptions.ts",
																											"line": 20,
																											"character": 5,
																											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L20"
																										}
																									],
																									"type": {
																										"type": "intrinsic",
																										"name": "boolean"
																									},
																									"defaultValue": "..."
																								}
																							],
																							"groups": [
																								{
																									"title": "Properties",
																									"children": [290, 287, 289, 288]
																								}
																							],
																							"sources": [
																								{
																									"fileName": "node_modules/zod/lib/types.d.ts",
																									"line": 1056,
																									"character": 262
																								}
																							]
																						}
																					}
																				],
																				"name": "ZodObject",
																				"package": "zod"
																			}
																		],
																		"name": "ZodDefault",
																		"package": "zod"
																	},
																	"defaultValue": "..."
																},
																{
																	"id": 274,
																	"name": "type",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/schema/XernerxOptions.ts",
																			"line": 16,
																			"character": 3,
																			"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L16"
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/zod/lib/types.d.ts",
																			"qualifiedName": "ZodDefault"
																		},
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": {
																					"sourceFileName": "node_modules/zod/lib/types.d.ts",
																					"qualifiedName": "ZodEnum"
																				},
																				"typeArguments": [
																					{
																						"type": "tuple",
																						"elements": [
																							{
																								"type": "literal",
																								"value": "dynamic"
																							},
																							{
																								"type": "literal",
																								"value": "static"
																							}
																						]
																					}
																				],
																				"name": "ZodEnum",
																				"package": "zod"
																			}
																		],
																		"name": "ZodDefault",
																		"package": "zod"
																	},
																	"defaultValue": "..."
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [275, 274]
																}
															],
															"sources": [
																{
																	"fileName": "src/schema/XernerxOptions.ts",
																	"line": 15,
																	"character": 10,
																	"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L15"
																}
															]
														}
													},
													{
														"type": "literal",
														"value": "strip"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/zod/lib/types.d.ts",
															"qualifiedName": "ZodTypeAny"
														},
														"name": "ZodTypeAny",
														"package": "zod"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 291,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"children": [
																{
																	"id": 293,
																	"name": "levels",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/schema/XernerxOptions.ts",
																			"line": 17,
																			"character": 3,
																			"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L17"
																		}
																	],
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 294,
																			"name": "__type",
																			"variant": "declaration",
																			"kind": 65536,
																			"flags": {},
																			"children": [
																				{
																					"id": 298,
																					"name": "debug",
																					"variant": "declaration",
																					"kind": 1024,
																					"flags": {},
																					"sources": [
																						{
																							"fileName": "src/schema/XernerxOptions.ts",
																							"line": 22,
																							"character": 5,
																							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L22"
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 295,
																					"name": "error",
																					"variant": "declaration",
																					"kind": 1024,
																					"flags": {},
																					"sources": [
																						{
																							"fileName": "src/schema/XernerxOptions.ts",
																							"line": 19,
																							"character": 5,
																							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L19"
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 297,
																					"name": "info",
																					"variant": "declaration",
																					"kind": 1024,
																					"flags": {},
																					"sources": [
																						{
																							"fileName": "src/schema/XernerxOptions.ts",
																							"line": 21,
																							"character": 5,
																							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L21"
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 296,
																					"name": "warn",
																					"variant": "declaration",
																					"kind": 1024,
																					"flags": {},
																					"sources": [
																						{
																							"fileName": "src/schema/XernerxOptions.ts",
																							"line": 20,
																							"character": 5,
																							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L20"
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"children": [298, 295, 297, 296]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "node_modules/zod/lib/types.d.ts",
																					"line": 1056,
																					"character": 123
																				}
																			]
																		}
																	},
																	"defaultValue": "..."
																},
																{
																	"id": 292,
																	"name": "type",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/schema/XernerxOptions.ts",
																			"line": 16,
																			"character": 3,
																			"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L16"
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "literal",
																				"value": "static"
																			},
																			{
																				"type": "literal",
																				"value": "dynamic"
																			}
																		]
																	},
																	"defaultValue": "..."
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [293, 292]
																}
															],
															"sources": [
																{
																	"fileName": "node_modules/zod/lib/types.d.ts",
																	"line": 1056,
																	"character": 123
																}
															]
														}
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 299,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"children": [
																{
																	"id": 301,
																	"name": "levels",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {
																		"isOptional": true
																	},
																	"sources": [
																		{
																			"fileName": "src/schema/XernerxOptions.ts",
																			"line": 17,
																			"character": 3,
																			"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L17"
																		}
																	],
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 302,
																			"name": "__type",
																			"variant": "declaration",
																			"kind": 65536,
																			"flags": {},
																			"children": [
																				{
																					"id": 306,
																					"name": "debug",
																					"variant": "declaration",
																					"kind": 1024,
																					"flags": {
																						"isOptional": true
																					},
																					"sources": [
																						{
																							"fileName": "src/schema/XernerxOptions.ts",
																							"line": 22,
																							"character": 5,
																							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L22"
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 303,
																					"name": "error",
																					"variant": "declaration",
																					"kind": 1024,
																					"flags": {
																						"isOptional": true
																					},
																					"sources": [
																						{
																							"fileName": "src/schema/XernerxOptions.ts",
																							"line": 19,
																							"character": 5,
																							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L19"
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 305,
																					"name": "info",
																					"variant": "declaration",
																					"kind": 1024,
																					"flags": {
																						"isOptional": true
																					},
																					"sources": [
																						{
																							"fileName": "src/schema/XernerxOptions.ts",
																							"line": 21,
																							"character": 5,
																							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L21"
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					},
																					"defaultValue": "..."
																				},
																				{
																					"id": 304,
																					"name": "warn",
																					"variant": "declaration",
																					"kind": 1024,
																					"flags": {
																						"isOptional": true
																					},
																					"sources": [
																						{
																							"fileName": "src/schema/XernerxOptions.ts",
																							"line": 20,
																							"character": 5,
																							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L20"
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					},
																					"defaultValue": "..."
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"children": [306, 303, 305, 304]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "node_modules/zod/lib/types.d.ts",
																					"line": 1056,
																					"character": 262
																				}
																			]
																		}
																	},
																	"defaultValue": "..."
																},
																{
																	"id": 300,
																	"name": "type",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {
																		"isOptional": true
																	},
																	"sources": [
																		{
																			"fileName": "src/schema/XernerxOptions.ts",
																			"line": 16,
																			"character": 3,
																			"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L16"
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "literal",
																				"value": "static"
																			},
																			{
																				"type": "literal",
																				"value": "dynamic"
																			}
																		]
																	},
																	"defaultValue": "..."
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [301, 300]
																}
															],
															"sources": [
																{
																	"fileName": "node_modules/zod/lib/types.d.ts",
																	"line": 1056,
																	"character": 262
																}
															]
														}
													}
												],
												"name": "ZodObject",
												"package": "zod"
											}
										],
										"name": "ZodDefault",
										"package": "zod"
									},
									"defaultValue": "..."
								},
								{
									"id": 270,
									"name": "token",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "required settings"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/schema/XernerxOptions.ts",
											"line": 7,
											"character": 1,
											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L7"
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/zod/lib/types.d.ts",
											"qualifiedName": "ZodDefault"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/zod/lib/types.d.ts",
													"qualifiedName": "ZodUnion"
												},
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/zod/lib/types.d.ts",
																	"qualifiedName": "ZodString"
																},
																"name": "ZodString",
																"package": "zod"
															},
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/zod/lib/types.d.ts",
																	"qualifiedName": "ZodNull"
																},
																"name": "ZodNull",
																"package": "zod"
															}
														]
													}
												],
												"name": "ZodUnion",
												"package": "zod"
											}
										],
										"name": "ZodDefault",
										"package": "zod"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [271, 272, 270]
								}
							],
							"sources": [
								{
									"fileName": "src/schema/XernerxOptions.ts",
									"line": 5,
									"character": 36,
									"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L5"
								}
							]
						}
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Variables",
					"children": [268]
				}
			],
			"sources": [
				{
					"fileName": "src/schema/XernerxOptions.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/schema/XernerxOptions.ts#L1"
				}
			]
		},
		{
			"id": 307,
			"name": "tools/XernerxLog",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 308,
					"name": "XernerxLog",
					"variant": "declaration",
					"kind": 32,
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/tools/XernerxLog.ts",
							"line": 7,
							"character": 13,
							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/tools/XernerxLog.ts#L7"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/tools/XernerxLog.ts",
							"qualifiedName": "XernerxLog"
						},
						"name": "XernerxLog",
						"package": "xernerx"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Variables",
					"children": [308]
				}
			],
			"sources": [
				{
					"fileName": "src/tools/XernerxLog.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/tools/XernerxLog.ts#L1"
				}
			]
		},
		{
			"id": 309,
			"name": "types/global",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 310,
					"name": "NodeJS",
					"variant": "declaration",
					"kind": 4,
					"flags": {},
					"children": [
						{
							"id": 311,
							"name": "Process",
							"variant": "declaration",
							"kind": 256,
							"flags": {},
							"children": [
								{
									"id": 314,
									"name": "xernerx",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "src/types/global.ts",
											"line": 9,
											"character": 3,
											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/global.ts#L9"
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 315,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 316,
													"name": "log",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/types/global.ts",
															"line": 10,
															"character": 4,
															"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/global.ts#L10"
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 317,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"children": [
																{
																	"id": 319,
																	"name": "levels",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/types/global.ts",
																			"line": 12,
																			"character": 5,
																			"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/global.ts#L12"
																		}
																	],
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 320,
																			"name": "__type",
																			"variant": "declaration",
																			"kind": 65536,
																			"flags": {},
																			"children": [
																				{
																					"id": 324,
																					"name": "debug",
																					"variant": "declaration",
																					"kind": 1024,
																					"flags": {},
																					"sources": [
																						{
																							"fileName": "src/types/global.ts",
																							"line": 12,
																							"character": 61,
																							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/global.ts#L12"
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				},
																				{
																					"id": 322,
																					"name": "error",
																					"variant": "declaration",
																					"kind": 1024,
																					"flags": {},
																					"sources": [
																						{
																							"fileName": "src/types/global.ts",
																							"line": 12,
																							"character": 30,
																							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/global.ts#L12"
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				},
																				{
																					"id": 321,
																					"name": "info",
																					"variant": "declaration",
																					"kind": 1024,
																					"flags": {},
																					"sources": [
																						{
																							"fileName": "src/types/global.ts",
																							"line": 12,
																							"character": 15,
																							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/global.ts#L12"
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				},
																				{
																					"id": 323,
																					"name": "warn",
																					"variant": "declaration",
																					"kind": 1024,
																					"flags": {},
																					"sources": [
																						{
																							"fileName": "src/types/global.ts",
																							"line": 12,
																							"character": 46,
																							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/global.ts#L12"
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "boolean"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"children": [324, 322, 321, 323]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "src/types/global.ts",
																					"line": 12,
																					"character": 13,
																					"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/global.ts#L12"
																				}
																			]
																		}
																	}
																},
																{
																	"id": 318,
																	"name": "type",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/types/global.ts",
																			"line": 11,
																			"character": 5,
																			"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/global.ts#L11"
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "literal",
																				"value": "static"
																			},
																			{
																				"type": "literal",
																				"value": "dynamic"
																			}
																		]
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [319, 318]
																}
															],
															"sources": [
																{
																	"fileName": "src/types/global.ts",
																	"line": 10,
																	"character": 10,
																	"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/global.ts#L10"
																}
															]
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [316]
												}
											],
											"sources": [
												{
													"fileName": "src/types/global.ts",
													"line": 9,
													"character": 12,
													"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/global.ts#L9"
												}
											]
										}
									}
								},
								{
									"id": 312,
									"name": "XernerxClient",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"sources": [
										{
											"fileName": "src/types/global.ts",
											"line": 8,
											"character": 3,
											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/global.ts#L8"
										}
									],
									"type": {
										"type": "reference",
										"target": 2,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 313,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										],
										"name": "XernerxClient",
										"package": "xernerx"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [314, 312]
								}
							],
							"sources": [
								{
									"fileName": "src/types/global.ts",
									"line": 7,
									"character": 12,
									"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/global.ts#L7"
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"children": [311]
						}
					],
					"sources": [
						{
							"fileName": "src/types/global.ts",
							"line": 6,
							"character": 11,
							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/global.ts#L6"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Namespaces",
					"children": [310]
				}
			],
			"sources": [
				{
					"fileName": "src/types/global.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/global.ts#L1"
				}
			]
		},
		{
			"id": 325,
			"name": "types/interfaces",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 326,
					"name": "XernerxOptions",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@format",
								"content": []
							}
						]
					},
					"children": [
						{
							"id": 328,
							"name": "debug",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/types/interfaces.ts",
									"line": 5,
									"character": 1,
									"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/interfaces.ts#L5"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 329,
							"name": "log",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/types/interfaces.ts",
									"line": 6,
									"character": 1,
									"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/interfaces.ts#L6"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 330,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 332,
											"name": "levels",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/types/interfaces.ts",
													"line": 8,
													"character": 2,
													"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/interfaces.ts#L8"
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 333,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 337,
															"name": "debug",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/types/interfaces.ts",
																	"line": 12,
																	"character": 3,
																	"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/interfaces.ts#L12"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 334,
															"name": "error",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/types/interfaces.ts",
																	"line": 9,
																	"character": 3,
																	"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/interfaces.ts#L9"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 336,
															"name": "info",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/types/interfaces.ts",
																	"line": 11,
																	"character": 3,
																	"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/interfaces.ts#L11"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 335,
															"name": "warn",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/types/interfaces.ts",
																	"line": 10,
																	"character": 3,
																	"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/interfaces.ts#L10"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [337, 334, 336, 335]
														}
													],
													"sources": [
														{
															"fileName": "src/types/interfaces.ts",
															"line": 8,
															"character": 11,
															"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/interfaces.ts#L8"
														}
													]
												}
											}
										},
										{
											"id": 331,
											"name": "type",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/types/interfaces.ts",
													"line": 7,
													"character": 2,
													"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/interfaces.ts#L7"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "static"
													},
													{
														"type": "literal",
														"value": "dynamic"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [332, 331]
										}
									],
									"sources": [
										{
											"fileName": "src/types/interfaces.ts",
											"line": 6,
											"character": 7,
											"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/interfaces.ts#L6"
										}
									]
								}
							}
						},
						{
							"id": 327,
							"name": "token",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/types/interfaces.ts",
									"line": 4,
									"character": 1,
									"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/interfaces.ts#L4"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [328, 329, 327]
						}
					],
					"sources": [
						{
							"fileName": "src/types/interfaces.ts",
							"line": 3,
							"character": 17,
							"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/interfaces.ts#L3"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"children": [326]
				}
			],
			"sources": [
				{
					"fileName": "src/types/interfaces.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/interfaces.ts#L1"
				}
			]
		},
		{
			"id": 338,
			"name": "types/types",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"sources": [
				{
					"fileName": "src/types/types.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/types/types.ts#L1"
				}
			]
		},
		{
			"id": 339,
			"name": "util/prompts",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"sources": [
				{
					"fileName": "src/util/prompts.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/c89f157a0b00114f1d093ab8c3e1a5f072e3fd66/src/util/prompts.ts#L1"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"children": [1, 262, 267, 307, 309, 325, 338, 339]
		}
	],
	"packageName": "xernerx",
	"packageVersion": "0.1.120-beta.111111114",
	"readme": [
		{
			"kind": "text",
			"text": "<!-- @format -->\n\n<center>\n\n![ICON](https://dummi.me/icons/XernerxLogoPurple.png)\n\n[![]("
		},
		{
			"kind": "relative-link",
			"text": "./docs/icons/Xernerx%20-%20Logo%20-%20Purple.png"
		},
		{
			"kind": "text",
			"text": ")](https://xernerx.github.io/xernerx)\n\n[![Discord](https://img.shields.io/discord/784094726432489522?logo=discord)](https://discord.gg/teNWyb69dq)\n![npm](https://img.shields.io/npm/dw/xernerx)\n![npm](https://img.shields.io/npm/dt/xernerx)\n![Read the Docs](https://img.shields.io/readthedocs/node)\n![npm type definitions](https://img.shields.io/npm/types/xernerx)\n![node-current](https://img.shields.io/npm/v/discord.js)\n[![wakatime](https://wakatime.com/badge/user/0eeef1b5-98a7-4ec0-ab4c-db00536d5ed1/project/23ab34b7-623b-45e8-b8db-e9f1910589f7.svg)](https://wakatime.com/badge/user/0eeef1b5-98a7-4ec0-ab4c-db00536d5ed1/project/23ab34b7-623b-45e8-b8db-e9f1910589f7)\n![node-current](https://img.shields.io/node/v/xernerx)\n![GitHub commit activity (branch)](https://img.shields.io/github/commit-activity/t/xernerx/xernerx)\n\n</center>\n\n# About\n\nXernerx is a class based discord.js framework. \\[BETA\\]\n\nIt can be customized to be a lightweight handler or a heavy customizable framework that does all the hard work for you\n\n## Features\n\n> - [x] Slash command handler\n> - [x] Message command handler\n> - [x] Context command handler\n> - [x] Event handler (with custom Events)\n> - [x] Inhibitor handler\n> - [x] Extension handler\n> - [x] Client Utilities\n> - [x] Message Utilities\n> - [x] Interaction Utilities\n> - [x] Message command handles\n> - [x] Extension support\n> - [x] ShardClient\n\n## Links\n\n> - [Documentation](https://xernerx.xyz/)\n> - [Guide](https://xernerx.xyz/guide)\n\n## Notes\n\n> - [x] CJS\n> - [x] ESM\n> - [x] TypeScript Types"
		}
	],
	"symbolIdMap": {
		"1": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": ""
		},
		"2": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient"
		},
		"3": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.once"
		},
		"4": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.once"
		},
		"5": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Emitter"
		},
		"6": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"7": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "eventEmitter"
		},
		"8": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "eventName"
		},
		"9": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "options"
		},
		"10": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"11": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type.signal"
		},
		"12": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.on"
		},
		"13": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.on"
		},
		"14": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Emitter"
		},
		"15": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"16": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "eventEmitter"
		},
		"17": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "eventName"
		},
		"18": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "options"
		},
		"19": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"20": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type.signal"
		},
		"21": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"22": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"23": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"24": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"25": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"26": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"27": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"28": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "name"
		},
		"29": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"30": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"31": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"32": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"33": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"34": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"35": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventTargets"
		},
		"36": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"37": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"38": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "signal"
		},
		"39": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "resource"
		},
		"40": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"41": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"42": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"43": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.errorMonitor"
		},
		"44": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejectionSymbol"
		},
		"45": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejections"
		},
		"46": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.defaultMaxListeners"
		},
		"47": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.__constructor"
		},
		"48": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient"
		},
		"49": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.T"
		},
		"50": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"51": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "DiscordOptions"
		},
		"52": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxOptions"
		},
		"53": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "config"
		},
		"54": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.settings"
		},
		"55": {
			"sourceFileName": "node_modules/zod/lib/types.d.ts",
			"qualifiedName": "__type"
		},
		"56": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "debug"
		},
		"57": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "token"
		},
		"58": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "log"
		},
		"59": {
			"sourceFileName": "node_modules/zod/lib/types.d.ts",
			"qualifiedName": "__type"
		},
		"60": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "type"
		},
		"61": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "levels"
		},
		"62": {
			"sourceFileName": "node_modules/zod/lib/types.d.ts",
			"qualifiedName": "__type"
		},
		"63": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "error"
		},
		"64": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "warn"
		},
		"65": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "info"
		},
		"66": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "debug"
		},
		"67": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.connect"
		},
		"68": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.connect"
		},
		"71": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.application"
		},
		"72": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.channels"
		},
		"73": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.emojis"
		},
		"74": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.emojis"
		},
		"75": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.guilds"
		},
		"76": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.options"
		},
		"77": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"78": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type.intents"
		},
		"79": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.readyAt"
		},
		"80": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.readyAt"
		},
		"81": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.readyTimestamp"
		},
		"82": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.sweepers"
		},
		"83": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.shard"
		},
		"84": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.token"
		},
		"85": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.uptime"
		},
		"86": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.uptime"
		},
		"87": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.user"
		},
		"88": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.users"
		},
		"89": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.voice"
		},
		"90": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.ws"
		},
		"91": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.destroy"
		},
		"92": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.destroy"
		},
		"93": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.deleteWebhook"
		},
		"94": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.deleteWebhook"
		},
		"95": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "id"
		},
		"96": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "options"
		},
		"97": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildPreview"
		},
		"98": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildPreview"
		},
		"99": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "guild"
		},
		"100": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchInvite"
		},
		"101": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchInvite"
		},
		"102": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "invite"
		},
		"103": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "options"
		},
		"104": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildTemplate"
		},
		"105": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildTemplate"
		},
		"106": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "template"
		},
		"107": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchVoiceRegions"
		},
		"108": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchVoiceRegions"
		},
		"109": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchSticker"
		},
		"110": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchSticker"
		},
		"111": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "id"
		},
		"112": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchStickerPacks"
		},
		"113": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchStickerPacks"
		},
		"114": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "options"
		},
		"115": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"116": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type.packId"
		},
		"117": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchStickerPacks"
		},
		"118": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "options"
		},
		"119": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchPremiumStickerPacks"
		},
		"120": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchPremiumStickerPacks"
		},
		"121": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchWebhook"
		},
		"122": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchWebhook"
		},
		"123": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "id"
		},
		"124": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "token"
		},
		"125": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildWidget"
		},
		"126": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildWidget"
		},
		"127": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "guild"
		},
		"128": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.generateInvite"
		},
		"129": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.generateInvite"
		},
		"130": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "options"
		},
		"131": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.login"
		},
		"132": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.login"
		},
		"133": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "token"
		},
		"134": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.isReady"
		},
		"135": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.isReady"
		},
		"136": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.toJSON"
		},
		"137": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.toJSON"
		},
		"138": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.on"
		},
		"139": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.on"
		},
		"140": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"141": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"142": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"143": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"144": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"145": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "args"
		},
		"146": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.on"
		},
		"147": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"148": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"149": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"150": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"151": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"152": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "args"
		},
		"153": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.once"
		},
		"154": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.once"
		},
		"155": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"156": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"157": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"158": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"159": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"160": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "args"
		},
		"161": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.once"
		},
		"162": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"163": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"164": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"165": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"166": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"167": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "args"
		},
		"168": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.emit"
		},
		"169": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.emit"
		},
		"170": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"171": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"172": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "args"
		},
		"173": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.emit"
		},
		"174": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"175": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"176": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "args"
		},
		"177": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.off"
		},
		"178": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.off"
		},
		"179": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"180": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"181": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"182": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"183": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"184": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "args"
		},
		"185": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.off"
		},
		"186": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"187": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"188": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"189": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"190": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"191": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "args"
		},
		"192": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.removeAllListeners"
		},
		"193": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.removeAllListeners"
		},
		"194": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"195": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"196": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.removeAllListeners"
		},
		"197": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"198": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"199": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "BaseClient.rest"
		},
		"200": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "BaseClient.[asyncDispose]"
		},
		"201": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "BaseClient.[asyncDispose]"
		},
		"202": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"203": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"204": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"205": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "error"
		},
		"206": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"207": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"208": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"209": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"210": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"211": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"212": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"213": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"214": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"215": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"216": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"217": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"218": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"219": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"220": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"221": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"222": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"223": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"224": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"225": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"226": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"227": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"228": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"229": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"230": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"231": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"232": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"233": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"234": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"235": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"236": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"237": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"238": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"239": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"240": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"241": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"242": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"243": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"244": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"245": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"246": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"247": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"248": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"249": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"250": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"251": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"252": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"253": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"254": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"255": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"256": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"257": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"258": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"259": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"260": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.T"
		},
		"261": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__type"
		},
		"262": {
			"sourceFileName": "src/function/init.ts",
			"qualifiedName": ""
		},
		"263": {
			"sourceFileName": "src/function/init.ts",
			"qualifiedName": "init"
		},
		"264": {
			"sourceFileName": "src/function/init.ts",
			"qualifiedName": "init"
		},
		"265": {
			"sourceFileName": "src/function/init.ts",
			"qualifiedName": "client"
		},
		"266": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"267": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": ""
		},
		"268": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "XernerxOptionsSchema"
		},
		"269": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "__object"
		},
		"270": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "__object.token"
		},
		"271": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "__object.debug"
		},
		"272": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "__object.log"
		},
		"273": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "__object"
		},
		"274": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "__object.type"
		},
		"275": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "__object.levels"
		},
		"276": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "__object"
		},
		"277": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "__object.error"
		},
		"278": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "__object.warn"
		},
		"279": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "__object.info"
		},
		"280": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "__object.debug"
		},
		"281": {
			"sourceFileName": "node_modules/zod/lib/types.d.ts",
			"qualifiedName": "__type"
		},
		"282": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "error"
		},
		"283": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "warn"
		},
		"284": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "info"
		},
		"285": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "debug"
		},
		"286": {
			"sourceFileName": "node_modules/zod/lib/types.d.ts",
			"qualifiedName": "__type"
		},
		"287": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "error"
		},
		"288": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "warn"
		},
		"289": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "info"
		},
		"290": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "debug"
		},
		"291": {
			"sourceFileName": "node_modules/zod/lib/types.d.ts",
			"qualifiedName": "__type"
		},
		"292": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "type"
		},
		"293": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "levels"
		},
		"294": {
			"sourceFileName": "node_modules/zod/lib/types.d.ts",
			"qualifiedName": "__type"
		},
		"295": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "error"
		},
		"296": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "warn"
		},
		"297": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "info"
		},
		"298": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "debug"
		},
		"299": {
			"sourceFileName": "node_modules/zod/lib/types.d.ts",
			"qualifiedName": "__type"
		},
		"300": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "type"
		},
		"301": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "levels"
		},
		"302": {
			"sourceFileName": "node_modules/zod/lib/types.d.ts",
			"qualifiedName": "__type"
		},
		"303": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "error"
		},
		"304": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "warn"
		},
		"305": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "info"
		},
		"306": {
			"sourceFileName": "src/schema/XernerxOptions.ts",
			"qualifiedName": "debug"
		},
		"307": {
			"sourceFileName": "src/tools/XernerxLog.ts",
			"qualifiedName": ""
		},
		"308": {
			"sourceFileName": "src/tools/XernerxLog.ts",
			"qualifiedName": "XernerxLog"
		},
		"309": {
			"sourceFileName": "src/types/global.ts",
			"qualifiedName": ""
		},
		"310": {
			"sourceFileName": "src/types/global.ts",
			"qualifiedName": "__global.NodeJS"
		},
		"311": {
			"sourceFileName": "src/types/global.ts",
			"qualifiedName": "__global.NodeJS.Process"
		},
		"312": {
			"sourceFileName": "src/types/global.ts",
			"qualifiedName": "__global.NodeJS.Process.XernerxClient"
		},
		"313": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"314": {
			"sourceFileName": "src/types/global.ts",
			"qualifiedName": "__global.NodeJS.Process.xernerx"
		},
		"315": {
			"sourceFileName": "src/types/global.ts",
			"qualifiedName": "__type"
		},
		"316": {
			"sourceFileName": "src/types/global.ts",
			"qualifiedName": "__type.log"
		},
		"317": {
			"sourceFileName": "src/types/global.ts",
			"qualifiedName": "__type"
		},
		"318": {
			"sourceFileName": "src/types/global.ts",
			"qualifiedName": "__type.type"
		},
		"319": {
			"sourceFileName": "src/types/global.ts",
			"qualifiedName": "__type.levels"
		},
		"320": {
			"sourceFileName": "src/types/global.ts",
			"qualifiedName": "__type"
		},
		"321": {
			"sourceFileName": "src/types/global.ts",
			"qualifiedName": "__type.info"
		},
		"322": {
			"sourceFileName": "src/types/global.ts",
			"qualifiedName": "__type.error"
		},
		"323": {
			"sourceFileName": "src/types/global.ts",
			"qualifiedName": "__type.warn"
		},
		"324": {
			"sourceFileName": "src/types/global.ts",
			"qualifiedName": "__type.debug"
		},
		"325": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": ""
		},
		"326": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxOptions"
		},
		"327": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxOptions.token"
		},
		"328": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxOptions.debug"
		},
		"329": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxOptions.log"
		},
		"330": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type"
		},
		"331": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type.type"
		},
		"332": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type.levels"
		},
		"333": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type"
		},
		"334": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type.error"
		},
		"335": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type.warn"
		},
		"336": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type.info"
		},
		"337": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type.debug"
		},
		"338": {
			"sourceFileName": "src/types/types.ts",
			"qualifiedName": ""
		},
		"339": {
			"sourceFileName": "src/util/prompts.ts",
			"qualifiedName": ""
		}
	},
	"files": {
		"entries": {
			"1": "src/client/XernerxClient.ts",
			"2": "src/function/init.ts",
			"3": "src/schema/XernerxOptions.ts",
			"4": "src/tools/XernerxLog.ts",
			"5": "src/types/global.ts",
			"6": "src/types/interfaces.ts",
			"7": "src/types/types.ts",
			"8": "src/util/prompts.ts"
		},
		"reflections": {
			"1": 1,
			"2": 262,
			"3": 267,
			"4": 307,
			"5": 309,
			"6": 325,
			"7": 338,
			"8": 339
		}
	}
}
