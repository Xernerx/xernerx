{
	"id": 0,
	"name": "XERNERX",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "builders/XernerxContextCommand",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 2,
					"name": "XernerxContextCommand",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "@module: Builder\n@description: Represents a context command in Xernerx Framework."
							}
						]
					},
					"children": [
						{
							"id": 3,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/builders/XernerxContextCommand.ts",
									"line": 16,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxContextCommand.ts#L16"
								}
							],
							"signatures": [
								{
									"id": 4,
									"name": "new XernerxContextCommand",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/builders/XernerxContextCommand.ts",
											"line": 16,
											"character": 2,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxContextCommand.ts#L16"
										}
									],
									"parameters": [
										{
											"id": 5,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 2,
										"name": "XernerxContextCommand",
										"package": "xernerx"
									}
								}
							]
						},
						{
							"id": 6,
							"name": "_id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxContextCommand.ts",
									"line": 9,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxContextCommand.ts#L9"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 11,
							"name": "collection",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxContextCommand.ts",
									"line": 14,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxContextCommand.ts#L14"
								}
							],
							"type": {
								"type": "literal",
								"value": "context.commands"
							}
						},
						{
							"id": 8,
							"name": "description",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxContextCommand.ts",
									"line": 11,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxContextCommand.ts#L11"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 10,
							"name": "filetype",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxContextCommand.ts",
									"line": 13,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxContextCommand.ts#L13"
								}
							],
							"type": {
								"type": "literal",
								"value": "XernerxContextCommand"
							}
						},
						{
							"id": 9,
							"name": "global",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxContextCommand.ts",
									"line": 12,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxContextCommand.ts#L12"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 7,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxContextCommand.ts",
									"line": 10,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxContextCommand.ts#L10"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [3]
						},
						{
							"title": "Properties",
							"children": [6, 11, 8, 10, 9, 7]
						}
					],
					"sources": [
						{
							"fileName": "src/builders/XernerxContextCommand.ts",
							"line": 8,
							"character": 13,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxContextCommand.ts#L8"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [2]
				}
			],
			"sources": [
				{
					"fileName": "src/builders/XernerxContextCommand.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxContextCommand.ts#L1"
				}
			]
		},
		{
			"id": 12,
			"name": "builders/XernerxEvent",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 13,
					"name": "XernerxEvent",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@format",
								"content": []
							}
						]
					},
					"children": [
						{
							"id": 14,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/builders/XernerxEvent.ts",
									"line": 10,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxEvent.ts#L10"
								}
							],
							"signatures": [
								{
									"id": 15,
									"name": "new XernerxEvent",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/builders/XernerxEvent.ts",
											"line": 10,
											"character": 2,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxEvent.ts#L10"
										}
									],
									"parameters": [
										{
											"id": 16,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 13,
										"name": "XernerxEvent",
										"package": "xernerx"
									}
								}
							]
						},
						{
							"id": 17,
							"name": "_id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxEvent.ts",
									"line": 4,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxEvent.ts#L4"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 21,
							"name": "collection",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxEvent.ts",
									"line": 8,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxEvent.ts#L8"
								}
							],
							"type": {
								"type": "literal",
								"value": "events"
							}
						},
						{
							"id": 19,
							"name": "description",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxEvent.ts",
									"line": 6,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxEvent.ts#L6"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 20,
							"name": "filetype",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxEvent.ts",
									"line": 7,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxEvent.ts#L7"
								}
							],
							"type": {
								"type": "literal",
								"value": "XernerxEvent"
							}
						},
						{
							"id": 18,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxEvent.ts",
									"line": 5,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxEvent.ts#L5"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [14]
						},
						{
							"title": "Properties",
							"children": [17, 21, 19, 20, 18]
						}
					],
					"sources": [
						{
							"fileName": "src/builders/XernerxEvent.ts",
							"line": 3,
							"character": 13,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxEvent.ts#L3"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [13]
				}
			],
			"sources": [
				{
					"fileName": "src/builders/XernerxEvent.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxEvent.ts#L1"
				}
			]
		},
		{
			"id": 22,
			"name": "builders/XernerxInhibitor",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 23,
					"name": "XernerxInhibitor",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@format",
								"content": []
							}
						]
					},
					"children": [
						{
							"id": 24,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/builders/XernerxInhibitor.ts",
									"line": 10,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxInhibitor.ts#L10"
								}
							],
							"signatures": [
								{
									"id": 25,
									"name": "new XernerxInhibitor",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/builders/XernerxInhibitor.ts",
											"line": 10,
											"character": 2,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxInhibitor.ts#L10"
										}
									],
									"parameters": [
										{
											"id": 26,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 23,
										"name": "XernerxInhibitor",
										"package": "xernerx"
									}
								}
							]
						},
						{
							"id": 27,
							"name": "_id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxInhibitor.ts",
									"line": 4,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxInhibitor.ts#L4"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 31,
							"name": "collection",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxInhibitor.ts",
									"line": 8,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxInhibitor.ts#L8"
								}
							],
							"type": {
								"type": "literal",
								"value": "inhibitors"
							}
						},
						{
							"id": 29,
							"name": "description",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxInhibitor.ts",
									"line": 6,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxInhibitor.ts#L6"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 30,
							"name": "filetype",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxInhibitor.ts",
									"line": 7,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxInhibitor.ts#L7"
								}
							],
							"type": {
								"type": "literal",
								"value": "XernerxInhibitor"
							}
						},
						{
							"id": 28,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxInhibitor.ts",
									"line": 5,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxInhibitor.ts#L5"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [24]
						},
						{
							"title": "Properties",
							"children": [27, 31, 29, 30, 28]
						}
					],
					"sources": [
						{
							"fileName": "src/builders/XernerxInhibitor.ts",
							"line": 3,
							"character": 13,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxInhibitor.ts#L3"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [23]
				}
			],
			"sources": [
				{
					"fileName": "src/builders/XernerxInhibitor.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxInhibitor.ts#L1"
				}
			]
		},
		{
			"id": 32,
			"name": "builders/XernerxMessageCommand",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 33,
					"name": "XernerxMessageCommand",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@format",
								"content": []
							}
						]
					},
					"children": [
						{
							"id": 34,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/builders/XernerxMessageCommand.ts",
									"line": 11,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxMessageCommand.ts#L11"
								}
							],
							"signatures": [
								{
									"id": 35,
									"name": "new XernerxMessageCommand",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/builders/XernerxMessageCommand.ts",
											"line": 11,
											"character": 2,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxMessageCommand.ts#L11"
										}
									],
									"parameters": [
										{
											"id": 36,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 33,
										"name": "XernerxMessageCommand",
										"package": "xernerx"
									}
								}
							]
						},
						{
							"id": 37,
							"name": "_id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxMessageCommand.ts",
									"line": 4,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxMessageCommand.ts#L4"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 42,
							"name": "collection",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxMessageCommand.ts",
									"line": 9,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxMessageCommand.ts#L9"
								}
							],
							"type": {
								"type": "literal",
								"value": "message.commands"
							}
						},
						{
							"id": 39,
							"name": "description",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxMessageCommand.ts",
									"line": 6,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxMessageCommand.ts#L6"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 41,
							"name": "filetype",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxMessageCommand.ts",
									"line": 8,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxMessageCommand.ts#L8"
								}
							],
							"type": {
								"type": "literal",
								"value": "XernerxMessageCommand"
							}
						},
						{
							"id": 40,
							"name": "global",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxMessageCommand.ts",
									"line": 7,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxMessageCommand.ts#L7"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 38,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxMessageCommand.ts",
									"line": 5,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxMessageCommand.ts#L5"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [34]
						},
						{
							"title": "Properties",
							"children": [37, 42, 39, 41, 40, 38]
						}
					],
					"sources": [
						{
							"fileName": "src/builders/XernerxMessageCommand.ts",
							"line": 3,
							"character": 13,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxMessageCommand.ts#L3"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [33]
				}
			],
			"sources": [
				{
					"fileName": "src/builders/XernerxMessageCommand.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxMessageCommand.ts#L1"
				}
			]
		},
		{
			"id": 43,
			"name": "builders/XernerxSlashCommand",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 44,
					"name": "XernerxSlashCommand",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 45,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/builders/XernerxSlashCommand.ts",
									"line": 11,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxSlashCommand.ts#L11"
								}
							],
							"signatures": [
								{
									"id": 46,
									"name": "new XernerxSlashCommand",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/builders/XernerxSlashCommand.ts",
											"line": 11,
											"character": 2,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxSlashCommand.ts#L11"
										}
									],
									"parameters": [
										{
											"id": 47,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 44,
										"name": "XernerxSlashCommand",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.constructor"
							}
						},
						{
							"id": 48,
							"name": "_id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxSlashCommand.ts",
									"line": 6,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxSlashCommand.ts#L6"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 51,
							"name": "collection",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxSlashCommand.ts",
									"line": 9,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxSlashCommand.ts#L9"
								}
							],
							"type": {
								"type": "literal",
								"value": "slash.commands"
							}
						},
						{
							"id": 57,
							"name": "contexts",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The contexts for this command."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1788,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/@discordjs/builders/node_modules/discord-api-types/payloads/v10/_interactions/applicationCommands.ts",
										"qualifiedName": "InteractionContextType"
									},
									"name": "InteractionContextType",
									"package": "discord-api-types"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.contexts"
							}
						},
						{
							"id": 59,
							"name": "default_member_permissions",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The set of permissions represented as a bit set for the command."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1798,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.default_member_permissions"
							}
						},
						{
							"id": 58,
							"name": "default_permission",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Whether this command is enabled by default when the application is added to a guild."
									}
								],
								"blockTags": [
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Use "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "SharedSlashCommand.setDefaultMemberPermissions",
												"target": {
													"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
													"qualifiedName": "SharedSlashCommand.setDefaultMemberPermissions"
												}
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "SharedSlashCommand.setDMPermission",
												"target": {
													"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
													"qualifiedName": "SharedSlashCommand.setDMPermission"
												}
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1794,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.default_permission"
							}
						},
						{
							"id": 54,
							"name": "description",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The description of this command."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1776,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.description"
							}
						},
						{
							"id": 55,
							"name": "description_localizations",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The description localizations of this command."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1780,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Partial"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "id"
													},
													{
														"type": "literal",
														"value": "en-US"
													},
													{
														"type": "literal",
														"value": "en-GB"
													},
													{
														"type": "literal",
														"value": "bg"
													},
													{
														"type": "literal",
														"value": "zh-CN"
													},
													{
														"type": "literal",
														"value": "zh-TW"
													},
													{
														"type": "literal",
														"value": "hr"
													},
													{
														"type": "literal",
														"value": "cs"
													},
													{
														"type": "literal",
														"value": "da"
													},
													{
														"type": "literal",
														"value": "nl"
													},
													{
														"type": "literal",
														"value": "fi"
													},
													{
														"type": "literal",
														"value": "fr"
													},
													{
														"type": "literal",
														"value": "de"
													},
													{
														"type": "literal",
														"value": "el"
													},
													{
														"type": "literal",
														"value": "hi"
													},
													{
														"type": "literal",
														"value": "hu"
													},
													{
														"type": "literal",
														"value": "it"
													},
													{
														"type": "literal",
														"value": "ja"
													},
													{
														"type": "literal",
														"value": "ko"
													},
													{
														"type": "literal",
														"value": "lt"
													},
													{
														"type": "literal",
														"value": "no"
													},
													{
														"type": "literal",
														"value": "pl"
													},
													{
														"type": "literal",
														"value": "pt-BR"
													},
													{
														"type": "literal",
														"value": "ro"
													},
													{
														"type": "literal",
														"value": "ru"
													},
													{
														"type": "literal",
														"value": "es-ES"
													},
													{
														"type": "literal",
														"value": "es-419"
													},
													{
														"type": "literal",
														"value": "sv-SE"
													},
													{
														"type": "literal",
														"value": "th"
													},
													{
														"type": "literal",
														"value": "tr"
													},
													{
														"type": "literal",
														"value": "uk"
													},
													{
														"type": "literal",
														"value": "vi"
													}
												]
											},
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								],
								"name": "Partial",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.description_localizations"
							}
						},
						{
							"id": 60,
							"name": "dm_permission",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Indicates whether the command is available in direct messages with the application."
									}
								],
								"blockTags": [
									{
										"tag": "@remarks",
										"content": [
											{
												"kind": "text",
												"text": "By default, commands are visible. This property is only for global commands."
											}
										]
									},
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Use "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "SlashCommandBuilder.contexts",
												"target": 57
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1807,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.dm_permission"
							}
						},
						{
							"id": 50,
							"name": "filetype",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxSlashCommand.ts",
									"line": 8,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxSlashCommand.ts#L8"
								}
							],
							"type": {
								"type": "literal",
								"value": "XernerxSlashCommand"
							}
						},
						{
							"id": 49,
							"name": "global",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/builders/XernerxSlashCommand.ts",
									"line": 7,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxSlashCommand.ts#L7"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 61,
							"name": "integration_types",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The integration types for this command."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1811,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/@discordjs/builders/node_modules/discord-api-types/payloads/v10/_interactions/applicationCommands.ts",
										"qualifiedName": "ApplicationIntegrationType"
									},
									"name": "ApplicationIntegrationType",
									"package": "discord-api-types"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.integration_types"
							}
						},
						{
							"id": 52,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The name of this command."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1768,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.name"
							}
						},
						{
							"id": 53,
							"name": "name_localizations",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The name localizations of this command."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1772,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Partial"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "id"
													},
													{
														"type": "literal",
														"value": "en-US"
													},
													{
														"type": "literal",
														"value": "en-GB"
													},
													{
														"type": "literal",
														"value": "bg"
													},
													{
														"type": "literal",
														"value": "zh-CN"
													},
													{
														"type": "literal",
														"value": "zh-TW"
													},
													{
														"type": "literal",
														"value": "hr"
													},
													{
														"type": "literal",
														"value": "cs"
													},
													{
														"type": "literal",
														"value": "da"
													},
													{
														"type": "literal",
														"value": "nl"
													},
													{
														"type": "literal",
														"value": "fi"
													},
													{
														"type": "literal",
														"value": "fr"
													},
													{
														"type": "literal",
														"value": "de"
													},
													{
														"type": "literal",
														"value": "el"
													},
													{
														"type": "literal",
														"value": "hi"
													},
													{
														"type": "literal",
														"value": "hu"
													},
													{
														"type": "literal",
														"value": "it"
													},
													{
														"type": "literal",
														"value": "ja"
													},
													{
														"type": "literal",
														"value": "ko"
													},
													{
														"type": "literal",
														"value": "lt"
													},
													{
														"type": "literal",
														"value": "no"
													},
													{
														"type": "literal",
														"value": "pl"
													},
													{
														"type": "literal",
														"value": "pt-BR"
													},
													{
														"type": "literal",
														"value": "ro"
													},
													{
														"type": "literal",
														"value": "ru"
													},
													{
														"type": "literal",
														"value": "es-ES"
													},
													{
														"type": "literal",
														"value": "es-419"
													},
													{
														"type": "literal",
														"value": "sv-SE"
													},
													{
														"type": "literal",
														"value": "th"
													},
													{
														"type": "literal",
														"value": "tr"
													},
													{
														"type": "literal",
														"value": "uk"
													},
													{
														"type": "literal",
														"value": "vi"
													}
												]
											},
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								],
								"name": "Partial",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.name_localizations"
							}
						},
						{
							"id": 62,
							"name": "nsfw",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Whether this command is NSFW."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1815,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.nsfw"
							}
						},
						{
							"id": 56,
							"name": "options",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The options of this command."
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1784,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
										"qualifiedName": "ToAPIApplicationCommandOptions"
									},
									"name": "ToAPIApplicationCommandOptions",
									"package": "@discordjs/builders"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.options"
							}
						},
						{
							"id": 107,
							"name": "addAttachmentOption",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1640,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 108,
									"name": "addAttachmentOption",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds an attachment option."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1640,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 109,
											"name": "input",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A function that returns an option builder or an already built builder"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
															"qualifiedName": "SlashCommandAttachmentOption"
														},
														"name": "SlashCommandAttachmentOption",
														"package": "@discordjs/builders"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 110,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																	"line": 1640,
																	"character": 63
																}
															],
															"signatures": [
																{
																	"id": 111,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"line": 1640,
																			"character": 63
																		}
																	],
																	"parameters": [
																		{
																			"id": 112,
																			"name": "builder",
																			"variant": "param",
																			"kind": 32768,
																			"flags": {
																				"isExternal": true
																			},
																			"type": {
																				"type": "reference",
																				"target": {
																					"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																					"qualifiedName": "SlashCommandAttachmentOption"
																				},
																				"name": "SlashCommandAttachmentOption",
																				"package": "@discordjs/builders"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"qualifiedName": "SlashCommandAttachmentOption"
																		},
																		"name": "SlashCommandAttachmentOption",
																		"package": "@discordjs/builders"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"qualifiedName": "SlashCommandOptionsOnlyBuilder"
										},
										"name": "SlashCommandOptionsOnlyBuilder",
										"package": "@discordjs/builders"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.addAttachmentOption"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.addAttachmentOption"
							}
						},
						{
							"id": 83,
							"name": "addBooleanOption",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1616,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 84,
									"name": "addBooleanOption",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a boolean option."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1616,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 85,
											"name": "input",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A function that returns an option builder or an already built builder"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
															"qualifiedName": "SlashCommandBooleanOption"
														},
														"name": "SlashCommandBooleanOption",
														"package": "@discordjs/builders"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 86,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																	"line": 1616,
																	"character": 57
																}
															],
															"signatures": [
																{
																	"id": 87,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"line": 1616,
																			"character": 57
																		}
																	],
																	"parameters": [
																		{
																			"id": 88,
																			"name": "builder",
																			"variant": "param",
																			"kind": 32768,
																			"flags": {
																				"isExternal": true
																			},
																			"type": {
																				"type": "reference",
																				"target": {
																					"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																					"qualifiedName": "SlashCommandBooleanOption"
																				},
																				"name": "SlashCommandBooleanOption",
																				"package": "@discordjs/builders"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"qualifiedName": "SlashCommandBooleanOption"
																		},
																		"name": "SlashCommandBooleanOption",
																		"package": "@discordjs/builders"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"qualifiedName": "SlashCommandOptionsOnlyBuilder"
										},
										"name": "SlashCommandOptionsOnlyBuilder",
										"package": "@discordjs/builders"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.addBooleanOption"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.addBooleanOption"
							}
						},
						{
							"id": 95,
							"name": "addChannelOption",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1628,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 96,
									"name": "addChannelOption",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a channel option."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1628,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 97,
											"name": "input",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A function that returns an option builder or an already built builder"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
															"qualifiedName": "SlashCommandChannelOption"
														},
														"name": "SlashCommandChannelOption",
														"package": "@discordjs/builders"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 98,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																	"line": 1628,
																	"character": 57
																}
															],
															"signatures": [
																{
																	"id": 99,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"line": 1628,
																			"character": 57
																		}
																	],
																	"parameters": [
																		{
																			"id": 100,
																			"name": "builder",
																			"variant": "param",
																			"kind": 32768,
																			"flags": {
																				"isExternal": true
																			},
																			"type": {
																				"type": "reference",
																				"target": {
																					"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																					"qualifiedName": "SlashCommandChannelOption"
																				},
																				"name": "SlashCommandChannelOption",
																				"package": "@discordjs/builders"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"qualifiedName": "SlashCommandChannelOption"
																		},
																		"name": "SlashCommandChannelOption",
																		"package": "@discordjs/builders"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"qualifiedName": "SlashCommandOptionsOnlyBuilder"
										},
										"name": "SlashCommandOptionsOnlyBuilder",
										"package": "@discordjs/builders"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.addChannelOption"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.addChannelOption"
							}
						},
						{
							"id": 125,
							"name": "addIntegerOption",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1658,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 126,
									"name": "addIntegerOption",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds an integer option."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1658,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 127,
											"name": "input",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A function that returns an option builder or an already built builder"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
															"qualifiedName": "SlashCommandIntegerOption"
														},
														"name": "SlashCommandIntegerOption",
														"package": "@discordjs/builders"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 128,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																	"line": 1658,
																	"character": 57
																}
															],
															"signatures": [
																{
																	"id": 129,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"line": 1658,
																			"character": 57
																		}
																	],
																	"parameters": [
																		{
																			"id": 130,
																			"name": "builder",
																			"variant": "param",
																			"kind": 32768,
																			"flags": {
																				"isExternal": true
																			},
																			"type": {
																				"type": "reference",
																				"target": {
																					"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																					"qualifiedName": "SlashCommandIntegerOption"
																				},
																				"name": "SlashCommandIntegerOption",
																				"package": "@discordjs/builders"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"qualifiedName": "SlashCommandIntegerOption"
																		},
																		"name": "SlashCommandIntegerOption",
																		"package": "@discordjs/builders"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"qualifiedName": "SlashCommandOptionsOnlyBuilder"
										},
										"name": "SlashCommandOptionsOnlyBuilder",
										"package": "@discordjs/builders"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.addIntegerOption"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.addIntegerOption"
							}
						},
						{
							"id": 113,
							"name": "addMentionableOption",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1646,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 114,
									"name": "addMentionableOption",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a mentionable option."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1646,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 115,
											"name": "input",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A function that returns an option builder or an already built builder"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
															"qualifiedName": "SlashCommandMentionableOption"
														},
														"name": "SlashCommandMentionableOption",
														"package": "@discordjs/builders"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 116,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																	"line": 1646,
																	"character": 65
																}
															],
															"signatures": [
																{
																	"id": 117,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"line": 1646,
																			"character": 65
																		}
																	],
																	"parameters": [
																		{
																			"id": 118,
																			"name": "builder",
																			"variant": "param",
																			"kind": 32768,
																			"flags": {
																				"isExternal": true
																			},
																			"type": {
																				"type": "reference",
																				"target": {
																					"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																					"qualifiedName": "SlashCommandMentionableOption"
																				},
																				"name": "SlashCommandMentionableOption",
																				"package": "@discordjs/builders"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"qualifiedName": "SlashCommandMentionableOption"
																		},
																		"name": "SlashCommandMentionableOption",
																		"package": "@discordjs/builders"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"qualifiedName": "SlashCommandOptionsOnlyBuilder"
										},
										"name": "SlashCommandOptionsOnlyBuilder",
										"package": "@discordjs/builders"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.addMentionableOption"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.addMentionableOption"
							}
						},
						{
							"id": 131,
							"name": "addNumberOption",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1664,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 132,
									"name": "addNumberOption",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a number option."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1664,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 133,
											"name": "input",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A function that returns an option builder or an already built builder"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
															"qualifiedName": "SlashCommandNumberOption"
														},
														"name": "SlashCommandNumberOption",
														"package": "@discordjs/builders"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 134,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																	"line": 1664,
																	"character": 55
																}
															],
															"signatures": [
																{
																	"id": 135,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"line": 1664,
																			"character": 55
																		}
																	],
																	"parameters": [
																		{
																			"id": 136,
																			"name": "builder",
																			"variant": "param",
																			"kind": 32768,
																			"flags": {
																				"isExternal": true
																			},
																			"type": {
																				"type": "reference",
																				"target": {
																					"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																					"qualifiedName": "SlashCommandNumberOption"
																				},
																				"name": "SlashCommandNumberOption",
																				"package": "@discordjs/builders"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"qualifiedName": "SlashCommandNumberOption"
																		},
																		"name": "SlashCommandNumberOption",
																		"package": "@discordjs/builders"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"qualifiedName": "SlashCommandOptionsOnlyBuilder"
										},
										"name": "SlashCommandOptionsOnlyBuilder",
										"package": "@discordjs/builders"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.addNumberOption"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.addNumberOption"
							}
						},
						{
							"id": 101,
							"name": "addRoleOption",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1634,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 102,
									"name": "addRoleOption",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a role option."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1634,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 103,
											"name": "input",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A function that returns an option builder or an already built builder"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
															"qualifiedName": "SlashCommandRoleOption"
														},
														"name": "SlashCommandRoleOption",
														"package": "@discordjs/builders"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 104,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																	"line": 1634,
																	"character": 51
																}
															],
															"signatures": [
																{
																	"id": 105,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"line": 1634,
																			"character": 51
																		}
																	],
																	"parameters": [
																		{
																			"id": 106,
																			"name": "builder",
																			"variant": "param",
																			"kind": 32768,
																			"flags": {
																				"isExternal": true
																			},
																			"type": {
																				"type": "reference",
																				"target": {
																					"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																					"qualifiedName": "SlashCommandRoleOption"
																				},
																				"name": "SlashCommandRoleOption",
																				"package": "@discordjs/builders"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"qualifiedName": "SlashCommandRoleOption"
																		},
																		"name": "SlashCommandRoleOption",
																		"package": "@discordjs/builders"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"qualifiedName": "SlashCommandOptionsOnlyBuilder"
										},
										"name": "SlashCommandOptionsOnlyBuilder",
										"package": "@discordjs/builders"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.addRoleOption"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.addRoleOption"
							}
						},
						{
							"id": 119,
							"name": "addStringOption",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1652,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 120,
									"name": "addStringOption",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a string option."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1652,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 121,
											"name": "input",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A function that returns an option builder or an already built builder"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
															"qualifiedName": "SlashCommandStringOption"
														},
														"name": "SlashCommandStringOption",
														"package": "@discordjs/builders"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 122,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																	"line": 1652,
																	"character": 55
																}
															],
															"signatures": [
																{
																	"id": 123,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"line": 1652,
																			"character": 55
																		}
																	],
																	"parameters": [
																		{
																			"id": 124,
																			"name": "builder",
																			"variant": "param",
																			"kind": 32768,
																			"flags": {
																				"isExternal": true
																			},
																			"type": {
																				"type": "reference",
																				"target": {
																					"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																					"qualifiedName": "SlashCommandStringOption"
																				},
																				"name": "SlashCommandStringOption",
																				"package": "@discordjs/builders"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"qualifiedName": "SlashCommandStringOption"
																		},
																		"name": "SlashCommandStringOption",
																		"package": "@discordjs/builders"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"qualifiedName": "SlashCommandOptionsOnlyBuilder"
										},
										"name": "SlashCommandOptionsOnlyBuilder",
										"package": "@discordjs/builders"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.addStringOption"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.addStringOption"
							}
						},
						{
							"id": 143,
							"name": "addSubcommand",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1758,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 144,
									"name": "addSubcommand",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a new subcommand to this command."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1758,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 145,
											"name": "input",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A function that returns a subcommand builder or an already built builder"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
															"qualifiedName": "SlashCommandSubcommandBuilder"
														},
														"name": "SlashCommandSubcommandBuilder",
														"package": "@discordjs/builders"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 146,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																	"line": 1758,
																	"character": 58
																}
															],
															"signatures": [
																{
																	"id": 147,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"line": 1758,
																			"character": 58
																		}
																	],
																	"parameters": [
																		{
																			"id": 148,
																			"name": "subcommandGroup",
																			"variant": "param",
																			"kind": 32768,
																			"flags": {
																				"isExternal": true
																			},
																			"type": {
																				"type": "reference",
																				"target": {
																					"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																					"qualifiedName": "SlashCommandSubcommandBuilder"
																				},
																				"name": "SlashCommandSubcommandBuilder",
																				"package": "@discordjs/builders"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"qualifiedName": "SlashCommandSubcommandBuilder"
																		},
																		"name": "SlashCommandSubcommandBuilder",
																		"package": "@discordjs/builders"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"qualifiedName": "SlashCommandSubcommandsOnlyBuilder"
										},
										"name": "SlashCommandSubcommandsOnlyBuilder",
										"package": "@discordjs/builders"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.addSubcommand"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.addSubcommand"
							}
						},
						{
							"id": 137,
							"name": "addSubcommandGroup",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1752,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 138,
									"name": "addSubcommandGroup",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a new subcommand group to this command."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1752,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 139,
											"name": "input",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A function that returns a subcommand group builder or an already built builder"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
															"qualifiedName": "SlashCommandSubcommandGroupBuilder"
														},
														"name": "SlashCommandSubcommandGroupBuilder",
														"package": "@discordjs/builders"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 140,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																	"line": 1752,
																	"character": 68
																}
															],
															"signatures": [
																{
																	"id": 141,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"line": 1752,
																			"character": 68
																		}
																	],
																	"parameters": [
																		{
																			"id": 142,
																			"name": "subcommandGroup",
																			"variant": "param",
																			"kind": 32768,
																			"flags": {
																				"isExternal": true
																			},
																			"type": {
																				"type": "reference",
																				"target": {
																					"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																					"qualifiedName": "SlashCommandSubcommandGroupBuilder"
																				},
																				"name": "SlashCommandSubcommandGroupBuilder",
																				"package": "@discordjs/builders"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"qualifiedName": "SlashCommandSubcommandGroupBuilder"
																		},
																		"name": "SlashCommandSubcommandGroupBuilder",
																		"package": "@discordjs/builders"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"qualifiedName": "SlashCommandSubcommandsOnlyBuilder"
										},
										"name": "SlashCommandSubcommandsOnlyBuilder",
										"package": "@discordjs/builders"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.addSubcommandGroup"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.addSubcommandGroup"
							}
						},
						{
							"id": 89,
							"name": "addUserOption",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1622,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 90,
									"name": "addUserOption",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a user option."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1622,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 91,
											"name": "input",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A function that returns an option builder or an already built builder"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
															"qualifiedName": "SlashCommandUserOption"
														},
														"name": "SlashCommandUserOption",
														"package": "@discordjs/builders"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 92,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																	"line": 1622,
																	"character": 51
																}
															],
															"signatures": [
																{
																	"id": 93,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"line": 1622,
																			"character": 51
																		}
																	],
																	"parameters": [
																		{
																			"id": 94,
																			"name": "builder",
																			"variant": "param",
																			"kind": 32768,
																			"flags": {
																				"isExternal": true
																			},
																			"type": {
																				"type": "reference",
																				"target": {
																					"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																					"qualifiedName": "SlashCommandUserOption"
																				},
																				"name": "SlashCommandUserOption",
																				"package": "@discordjs/builders"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
																			"qualifiedName": "SlashCommandUserOption"
																		},
																		"name": "SlashCommandUserOption",
																		"package": "@discordjs/builders"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"qualifiedName": "SlashCommandOptionsOnlyBuilder"
										},
										"name": "SlashCommandOptionsOnlyBuilder",
										"package": "@discordjs/builders"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.addUserOption"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.addUserOption"
							}
						},
						{
							"id": 149,
							"name": "setContexts",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1244,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 150,
									"name": "setContexts",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sets the contexts of this command."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1244,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 151,
											"name": "contexts",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The contexts"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
													"qualifiedName": "RestOrArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@discordjs/builders/node_modules/discord-api-types/payloads/v10/_interactions/applicationCommands.ts",
															"qualifiedName": "InteractionContextType"
														},
														"name": "InteractionContextType",
														"package": "discord-api-types"
													}
												],
												"name": "RestOrArray",
												"package": "@discordjs/builders"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.setContexts"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.setContexts"
							}
						},
						{
							"id": 158,
							"name": "setDefaultMemberPermissions",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1269,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 159,
									"name": "setDefaultMemberPermissions",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sets the default permissions a member should have in order to run the command."
											}
										],
										"blockTags": [
											{
												"tag": "@remarks",
												"content": [
													{
														"kind": "text",
														"text": "You can set this to "
													},
													{
														"kind": "code",
														"text": "`'0'`"
													},
													{
														"kind": "text",
														"text": " to disable the command by default."
													}
												]
											},
											{
												"tag": "@see",
												"content": [
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "https://discord.com/developers/docs/interactions/application-commands#permissions",
														"target": "https://discord.com/developers/docs/interactions/application-commands#permissions"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1269,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 160,
											"name": "permissions",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The permissions bit field to set"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "bigint"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.setDefaultMemberPermissions"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.setDefaultMemberPermissions"
							}
						},
						{
							"id": 155,
							"name": "setDefaultPermission",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1260,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 156,
									"name": "setDefaultPermission",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sets whether the command is enabled by default when the application is added to a guild."
											}
										],
										"blockTags": [
											{
												"tag": "@remarks",
												"content": [
													{
														"kind": "text",
														"text": "If set to "
													},
													{
														"kind": "code",
														"text": "`false`"
													},
													{
														"kind": "text",
														"text": ", you will have to later "
													},
													{
														"kind": "code",
														"text": "`PUT`"
													},
													{
														"kind": "text",
														"text": " the permissions for this command."
													}
												]
											},
											{
												"tag": "@see",
												"content": [
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "https://discord.com/developers/docs/interactions/application-commands#permissions",
														"target": "https://discord.com/developers/docs/interactions/application-commands#permissions"
													}
												]
											},
											{
												"tag": "@deprecated",
												"content": [
													{
														"kind": "text",
														"text": "Use "
													},
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "SharedSlashCommand.setDefaultMemberPermissions",
														"target": {
															"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
															"qualifiedName": "SharedSlashCommand.setDefaultMemberPermissions"
														}
													},
													{
														"kind": "text",
														"text": " or "
													},
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "SharedSlashCommand.setDMPermission",
														"target": {
															"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
															"qualifiedName": "SharedSlashCommand.setDMPermission"
														}
													},
													{
														"kind": "text",
														"text": " instead."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1260,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 157,
											"name": "value",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Whether or not to enable this command by default"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.setDefaultPermission"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.setDefaultPermission"
							}
						},
						{
							"id": 66,
							"name": "setDescription",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1189,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 67,
									"name": "setDescription",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sets the description of this command."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1189,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 68,
											"name": "description",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The description to use"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.setDescription"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.setDescription"
							}
						},
						{
							"id": 76,
							"name": "setDescriptionLocalization",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1209,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 77,
									"name": "setDescriptionLocalization",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sets a description localization for this command."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1209,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 78,
											"name": "locale",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The locale to set"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "id"
													},
													{
														"type": "literal",
														"value": "en-US"
													},
													{
														"type": "literal",
														"value": "en-GB"
													},
													{
														"type": "literal",
														"value": "bg"
													},
													{
														"type": "literal",
														"value": "zh-CN"
													},
													{
														"type": "literal",
														"value": "zh-TW"
													},
													{
														"type": "literal",
														"value": "hr"
													},
													{
														"type": "literal",
														"value": "cs"
													},
													{
														"type": "literal",
														"value": "da"
													},
													{
														"type": "literal",
														"value": "nl"
													},
													{
														"type": "literal",
														"value": "fi"
													},
													{
														"type": "literal",
														"value": "fr"
													},
													{
														"type": "literal",
														"value": "de"
													},
													{
														"type": "literal",
														"value": "el"
													},
													{
														"type": "literal",
														"value": "hi"
													},
													{
														"type": "literal",
														"value": "hu"
													},
													{
														"type": "literal",
														"value": "it"
													},
													{
														"type": "literal",
														"value": "ja"
													},
													{
														"type": "literal",
														"value": "ko"
													},
													{
														"type": "literal",
														"value": "lt"
													},
													{
														"type": "literal",
														"value": "no"
													},
													{
														"type": "literal",
														"value": "pl"
													},
													{
														"type": "literal",
														"value": "pt-BR"
													},
													{
														"type": "literal",
														"value": "ro"
													},
													{
														"type": "literal",
														"value": "ru"
													},
													{
														"type": "literal",
														"value": "es-ES"
													},
													{
														"type": "literal",
														"value": "es-419"
													},
													{
														"type": "literal",
														"value": "sv-SE"
													},
													{
														"type": "literal",
														"value": "th"
													},
													{
														"type": "literal",
														"value": "tr"
													},
													{
														"type": "literal",
														"value": "uk"
													},
													{
														"type": "literal",
														"value": "vi"
													}
												]
											}
										},
										{
											"id": 79,
											"name": "localizedDescription",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The localized description for the given locale"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.setDescriptionLocalization"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.setDescriptionLocalization"
							}
						},
						{
							"id": 80,
							"name": "setDescriptionLocalizations",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1215,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 81,
									"name": "setDescriptionLocalizations",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sets the description localizations for this command."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1215,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 82,
											"name": "localizedDescriptions",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The object of localized descriptions to set"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Partial"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Record"
																},
																"typeArguments": [
																	{
																		"type": "union",
																		"types": [
																			{
																				"type": "literal",
																				"value": "id"
																			},
																			{
																				"type": "literal",
																				"value": "en-US"
																			},
																			{
																				"type": "literal",
																				"value": "en-GB"
																			},
																			{
																				"type": "literal",
																				"value": "bg"
																			},
																			{
																				"type": "literal",
																				"value": "zh-CN"
																			},
																			{
																				"type": "literal",
																				"value": "zh-TW"
																			},
																			{
																				"type": "literal",
																				"value": "hr"
																			},
																			{
																				"type": "literal",
																				"value": "cs"
																			},
																			{
																				"type": "literal",
																				"value": "da"
																			},
																			{
																				"type": "literal",
																				"value": "nl"
																			},
																			{
																				"type": "literal",
																				"value": "fi"
																			},
																			{
																				"type": "literal",
																				"value": "fr"
																			},
																			{
																				"type": "literal",
																				"value": "de"
																			},
																			{
																				"type": "literal",
																				"value": "el"
																			},
																			{
																				"type": "literal",
																				"value": "hi"
																			},
																			{
																				"type": "literal",
																				"value": "hu"
																			},
																			{
																				"type": "literal",
																				"value": "it"
																			},
																			{
																				"type": "literal",
																				"value": "ja"
																			},
																			{
																				"type": "literal",
																				"value": "ko"
																			},
																			{
																				"type": "literal",
																				"value": "lt"
																			},
																			{
																				"type": "literal",
																				"value": "no"
																			},
																			{
																				"type": "literal",
																				"value": "pl"
																			},
																			{
																				"type": "literal",
																				"value": "pt-BR"
																			},
																			{
																				"type": "literal",
																				"value": "ro"
																			},
																			{
																				"type": "literal",
																				"value": "ru"
																			},
																			{
																				"type": "literal",
																				"value": "es-ES"
																			},
																			{
																				"type": "literal",
																				"value": "es-419"
																			},
																			{
																				"type": "literal",
																				"value": "sv-SE"
																			},
																			{
																				"type": "literal",
																				"value": "th"
																			},
																			{
																				"type": "literal",
																				"value": "tr"
																			},
																			{
																				"type": "literal",
																				"value": "uk"
																			},
																			{
																				"type": "literal",
																				"value": "vi"
																			}
																		]
																	},
																	{
																		"type": "union",
																		"types": [
																			{
																				"type": "literal",
																				"value": null
																			},
																			{
																				"type": "intrinsic",
																				"name": "string"
																			}
																		]
																	}
																],
																"name": "Record",
																"package": "typescript"
															}
														],
														"name": "Partial",
														"package": "typescript"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.setDescriptionLocalizations"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.setDescriptionLocalizations"
							}
						},
						{
							"id": 161,
							"name": "setDMPermission",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1280,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 162,
									"name": "setDMPermission",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sets if the command is available in direct messages with the application."
											}
										],
										"blockTags": [
											{
												"tag": "@remarks",
												"content": [
													{
														"kind": "text",
														"text": "By default, commands are visible. This method is only for global commands."
													}
												]
											},
											{
												"tag": "@see",
												"content": [
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "https://discord.com/developers/docs/interactions/application-commands#permissions",
														"target": "https://discord.com/developers/docs/interactions/application-commands#permissions"
													}
												]
											},
											{
												"tag": "@deprecated",
												"content": [
													{
														"kind": "text",
														"text": "Use "
													},
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "SharedSlashCommand.setContexts",
														"target": {
															"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
															"qualifiedName": "SharedSlashCommand.setContexts"
														}
													},
													{
														"kind": "text",
														"text": " instead."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1280,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 163,
											"name": "enabled",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Whether the command should be enabled in direct messages"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.setDMPermission"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.setDMPermission"
							}
						},
						{
							"id": 152,
							"name": "setIntegrationTypes",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1250,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 153,
									"name": "setIntegrationTypes",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sets the integration types of this command."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1250,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 154,
											"name": "integrationTypes",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The integration types"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
													"qualifiedName": "RestOrArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@discordjs/builders/node_modules/discord-api-types/payloads/v10/_interactions/applicationCommands.ts",
															"qualifiedName": "ApplicationIntegrationType"
														},
														"name": "ApplicationIntegrationType",
														"package": "discord-api-types"
													}
												],
												"name": "RestOrArray",
												"package": "@discordjs/builders"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.setIntegrationTypes"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.setIntegrationTypes"
							}
						},
						{
							"id": 63,
							"name": "setName",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1183,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 64,
									"name": "setName",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sets the name of this command."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1183,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 65,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name to use"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.setName"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.setName"
							}
						},
						{
							"id": 69,
							"name": "setNameLocalization",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1196,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 70,
									"name": "setNameLocalization",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sets a name localization for this command."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1196,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 71,
											"name": "locale",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The locale to set"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "id"
													},
													{
														"type": "literal",
														"value": "en-US"
													},
													{
														"type": "literal",
														"value": "en-GB"
													},
													{
														"type": "literal",
														"value": "bg"
													},
													{
														"type": "literal",
														"value": "zh-CN"
													},
													{
														"type": "literal",
														"value": "zh-TW"
													},
													{
														"type": "literal",
														"value": "hr"
													},
													{
														"type": "literal",
														"value": "cs"
													},
													{
														"type": "literal",
														"value": "da"
													},
													{
														"type": "literal",
														"value": "nl"
													},
													{
														"type": "literal",
														"value": "fi"
													},
													{
														"type": "literal",
														"value": "fr"
													},
													{
														"type": "literal",
														"value": "de"
													},
													{
														"type": "literal",
														"value": "el"
													},
													{
														"type": "literal",
														"value": "hi"
													},
													{
														"type": "literal",
														"value": "hu"
													},
													{
														"type": "literal",
														"value": "it"
													},
													{
														"type": "literal",
														"value": "ja"
													},
													{
														"type": "literal",
														"value": "ko"
													},
													{
														"type": "literal",
														"value": "lt"
													},
													{
														"type": "literal",
														"value": "no"
													},
													{
														"type": "literal",
														"value": "pl"
													},
													{
														"type": "literal",
														"value": "pt-BR"
													},
													{
														"type": "literal",
														"value": "ro"
													},
													{
														"type": "literal",
														"value": "ru"
													},
													{
														"type": "literal",
														"value": "es-ES"
													},
													{
														"type": "literal",
														"value": "es-419"
													},
													{
														"type": "literal",
														"value": "sv-SE"
													},
													{
														"type": "literal",
														"value": "th"
													},
													{
														"type": "literal",
														"value": "tr"
													},
													{
														"type": "literal",
														"value": "uk"
													},
													{
														"type": "literal",
														"value": "vi"
													}
												]
											}
										},
										{
											"id": 72,
											"name": "localizedName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The localized name for the given "
													},
													{
														"kind": "code",
														"text": "`locale`"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.setNameLocalization"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.setNameLocalization"
							}
						},
						{
							"id": 73,
							"name": "setNameLocalizations",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1202,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 74,
									"name": "setNameLocalizations",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sets the name localizations for this command."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1202,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 75,
											"name": "localizedNames",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The object of localized names to set"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Partial"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Record"
																},
																"typeArguments": [
																	{
																		"type": "union",
																		"types": [
																			{
																				"type": "literal",
																				"value": "id"
																			},
																			{
																				"type": "literal",
																				"value": "en-US"
																			},
																			{
																				"type": "literal",
																				"value": "en-GB"
																			},
																			{
																				"type": "literal",
																				"value": "bg"
																			},
																			{
																				"type": "literal",
																				"value": "zh-CN"
																			},
																			{
																				"type": "literal",
																				"value": "zh-TW"
																			},
																			{
																				"type": "literal",
																				"value": "hr"
																			},
																			{
																				"type": "literal",
																				"value": "cs"
																			},
																			{
																				"type": "literal",
																				"value": "da"
																			},
																			{
																				"type": "literal",
																				"value": "nl"
																			},
																			{
																				"type": "literal",
																				"value": "fi"
																			},
																			{
																				"type": "literal",
																				"value": "fr"
																			},
																			{
																				"type": "literal",
																				"value": "de"
																			},
																			{
																				"type": "literal",
																				"value": "el"
																			},
																			{
																				"type": "literal",
																				"value": "hi"
																			},
																			{
																				"type": "literal",
																				"value": "hu"
																			},
																			{
																				"type": "literal",
																				"value": "it"
																			},
																			{
																				"type": "literal",
																				"value": "ja"
																			},
																			{
																				"type": "literal",
																				"value": "ko"
																			},
																			{
																				"type": "literal",
																				"value": "lt"
																			},
																			{
																				"type": "literal",
																				"value": "no"
																			},
																			{
																				"type": "literal",
																				"value": "pl"
																			},
																			{
																				"type": "literal",
																				"value": "pt-BR"
																			},
																			{
																				"type": "literal",
																				"value": "ro"
																			},
																			{
																				"type": "literal",
																				"value": "ru"
																			},
																			{
																				"type": "literal",
																				"value": "es-ES"
																			},
																			{
																				"type": "literal",
																				"value": "es-419"
																			},
																			{
																				"type": "literal",
																				"value": "sv-SE"
																			},
																			{
																				"type": "literal",
																				"value": "th"
																			},
																			{
																				"type": "literal",
																				"value": "tr"
																			},
																			{
																				"type": "literal",
																				"value": "uk"
																			},
																			{
																				"type": "literal",
																				"value": "vi"
																			}
																		]
																	},
																	{
																		"type": "union",
																		"types": [
																			{
																				"type": "literal",
																				"value": null
																			},
																			{
																				"type": "intrinsic",
																				"name": "string"
																			}
																		]
																	}
																],
																"name": "Record",
																"package": "typescript"
															}
														],
														"name": "Partial",
														"package": "typescript"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.setNameLocalizations"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.setNameLocalizations"
							}
						},
						{
							"id": 164,
							"name": "setNSFW",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1286,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 165,
									"name": "setNSFW",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sets whether this command is NSFW."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1286,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 166,
											"name": "nsfw",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Whether this command is NSFW"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.setNSFW"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.setNSFW"
							}
						},
						{
							"id": 167,
							"name": "toJSON",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
									"line": 1294,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 168,
									"name": "toJSON",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Serializes this builder to API-compatible JSON data."
											}
										],
										"blockTags": [
											{
												"tag": "@remarks",
												"content": [
													{
														"kind": "text",
														"text": "This method runs validations on the data before serializing it.\nAs such, it may throw an error if the data is invalid."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/builders/dist/index.d.mts",
											"line": 1294,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@discordjs/builders/node_modules/discord-api-types/rest/v10/interactions.ts",
											"qualifiedName": "RESTPostAPIChatInputApplicationCommandsJSONBody"
										},
										"name": "RESTPostAPIChatInputApplicationCommandsJSONBody",
										"package": "discord-api-types"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.SlashCommandBuilder.toJSON"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.SlashCommandBuilder.toJSON"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [45]
						},
						{
							"title": "Properties",
							"children": [48, 51, 57, 59, 58, 54, 55, 60, 50, 49, 61, 52, 53, 62, 56]
						},
						{
							"title": "Methods",
							"children": [107, 83, 95, 125, 113, 131, 101, 119, 143, 137, 89, 149, 158, 155, 66, 76, 80, 161, 152, 63, 69, 73, 164, 167]
						}
					],
					"sources": [
						{
							"fileName": "src/builders/XernerxSlashCommand.ts",
							"line": 5,
							"character": 13,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxSlashCommand.ts#L5"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
								"qualifiedName": "SlashCommandBuilder"
							},
							"name": "SlashCommandBuilder",
							"package": "@discordjs/builders"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [44]
				}
			],
			"sources": [
				{
					"fileName": "src/builders/XernerxSlashCommand.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/builders/XernerxSlashCommand.ts#L1"
				}
			]
		},
		{
			"id": 169,
			"name": "client/XernerxClient",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 170,
					"name": "XernerxClient",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 215,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 36,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L36"
								}
							],
							"signatures": [
								{
									"id": 216,
									"name": "new XernerxClient",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/client/XernerxClient.ts",
											"line": 36,
											"character": 2,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L36"
										}
									],
									"typeParameters": [
										{
											"id": 217,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"default": {
												"type": "reflection",
												"declaration": {
													"id": 218,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 219,
											"name": "DiscordOptions",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 220,
											"name": "XernerxOptions",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 221,
											"name": "config",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 217,
												"name": "T",
												"package": "xernerx",
												"qualifiedName": "XernerxClient.T",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 170,
										"typeArguments": [
											{
												"type": "reference",
												"target": 217,
												"name": "T",
												"package": "xernerx",
												"qualifiedName": "XernerxClient.T",
												"refersToTypeParameter": true
											}
										],
										"name": "XernerxClient",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.constructor"
							}
						},
						{
							"id": 266,
							"name": "application",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1008,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
											"qualifiedName": "ClientApplication"
										},
										"name": "ClientApplication",
										"package": "discord.js"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.application"
							}
						},
						{
							"id": 267,
							"name": "channels",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1009,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
									"qualifiedName": "ChannelManager"
								},
								"name": "ChannelManager",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.channels"
							}
						},
						{
							"id": 253,
							"name": "commands",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 32,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L32"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 254,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 257,
											"name": "context",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 108,
													"character": 6,
													"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L108"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@discordjs/collection/dist/index.d.ts",
													"qualifiedName": "Collection"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": 2,
														"name": "XernerxContextCommand",
														"package": "xernerx"
													}
												],
												"name": "Collection",
												"package": "@discordjs/collection"
											},
											"defaultValue": "..."
										},
										{
											"id": 255,
											"name": "message",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 100,
													"character": 6,
													"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L100"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@discordjs/collection/dist/index.d.ts",
													"qualifiedName": "Collection"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": 33,
														"name": "XernerxMessageCommand",
														"package": "xernerx"
													}
												],
												"name": "Collection",
												"package": "@discordjs/collection"
											},
											"defaultValue": "..."
										},
										{
											"id": 256,
											"name": "slash",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 104,
													"character": 6,
													"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L104"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@discordjs/collection/dist/index.d.ts",
													"qualifiedName": "Collection"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": 44,
														"name": "XernerxSlashCommand",
														"package": "xernerx"
													}
												],
												"name": "Collection",
												"package": "@discordjs/collection"
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [257, 255, 256]
										}
									],
									"sources": [
										{
											"fileName": "src/client/XernerxClient.ts",
											"line": 99,
											"character": 20,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L99"
										}
									]
								}
							}
						},
						{
							"id": 258,
							"name": "events",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 33,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L33"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/@discordjs/collection/dist/index.d.ts",
									"qualifiedName": "Collection"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": 13,
										"name": "XernerxEvent",
										"package": "xernerx"
									}
								],
								"name": "Collection",
								"package": "@discordjs/collection"
							}
						},
						{
							"id": 270,
							"name": "guilds",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1011,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
									"qualifiedName": "GuildManager"
								},
								"name": "GuildManager",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.guilds"
							}
						},
						{
							"id": 259,
							"name": "inhibitors",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 34,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L34"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/@discordjs/collection/dist/index.d.ts",
									"qualifiedName": "Collection"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": 23,
										"name": "XernerxInhibitor",
										"package": "xernerx"
									}
								],
								"name": "Collection",
								"package": "@discordjs/collection"
							}
						},
						{
							"id": 237,
							"name": "modules",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 23,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L23"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 238,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 239,
											"name": "commandHandler",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 24,
													"character": 4,
													"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L24"
												}
											],
											"type": {
												"type": "reference",
												"target": 458,
												"name": "CommandHandler",
												"package": "xernerx"
											}
										},
										{
											"id": 240,
											"name": "options",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 25,
													"character": 4,
													"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L25"
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 241,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 249,
															"name": "context",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/client/XernerxClient.ts",
																	"line": 28,
																	"character": 6,
																	"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L28"
																}
															],
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 250,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {},
																	"children": [
																		{
																			"id": 251,
																			"name": "global",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"sources": [
																				{
																					"fileName": "src/client/XernerxClient.ts",
																					"line": 28,
																					"character": 18,
																					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L28"
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"children": [251]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "src/client/XernerxClient.ts",
																			"line": 28,
																			"character": 16,
																			"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L28"
																		}
																	]
																}
															}
														},
														{
															"id": 242,
															"name": "message",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/client/XernerxClient.ts",
																	"line": 26,
																	"character": 6,
																	"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L26"
																}
															],
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 243,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {},
																	"children": [
																		{
																			"id": 244,
																			"name": "global",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"sources": [
																				{
																					"fileName": "src/client/XernerxClient.ts",
																					"line": 26,
																					"character": 18,
																					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L26"
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		},
																		{
																			"id": 245,
																			"name": "prefix",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "src/client/XernerxClient.ts",
																					"line": 26,
																					"character": 36,
																					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L26"
																				}
																			],
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"children": [244, 245]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "src/client/XernerxClient.ts",
																			"line": 26,
																			"character": 16,
																			"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L26"
																		}
																	]
																}
															}
														},
														{
															"id": 246,
															"name": "slash",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/client/XernerxClient.ts",
																	"line": 27,
																	"character": 6,
																	"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L27"
																}
															],
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 247,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {},
																	"children": [
																		{
																			"id": 248,
																			"name": "global",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"sources": [
																				{
																					"fileName": "src/client/XernerxClient.ts",
																					"line": 27,
																					"character": 16,
																					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L27"
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"children": [248]
																		}
																	],
																	"sources": [
																		{
																			"fileName": "src/client/XernerxClient.ts",
																			"line": 27,
																			"character": 14,
																			"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L27"
																		}
																	]
																}
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [249, 242, 246]
														}
													],
													"sources": [
														{
															"fileName": "src/client/XernerxClient.ts",
															"line": 25,
															"character": 13,
															"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L25"
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [239, 240]
										}
									],
									"sources": [
										{
											"fileName": "src/client/XernerxClient.ts",
											"line": 23,
											"character": 35,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L23"
										}
									]
								}
							}
						},
						{
							"id": 271,
							"name": "options",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1012,
									"character": 9
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Omit"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "ClientOptions"
												},
												"name": "ClientOptions",
												"package": "discord.js"
											},
											{
												"type": "literal",
												"value": "intents"
											}
										],
										"name": "Omit",
										"package": "typescript"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 272,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"children": [
												{
													"id": 273,
													"name": "intents",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1012,
															"character": 53
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
															"qualifiedName": "IntentsBitField"
														},
														"name": "IntentsBitField",
														"package": "discord.js"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [273]
												}
											],
											"sources": [
												{
													"fileName": "node_modules/discord.js/typings/index.d.mts",
													"line": 1012,
													"character": 51
												}
											]
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.options"
							}
						},
						{
							"id": 276,
							"name": "readyTimestamp",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1014,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.readyTimestamp"
							}
						},
						{
							"id": 394,
							"name": "rest",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 533,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/@discordjs/rest/dist/index.d.mts",
									"qualifiedName": "REST"
								},
								"name": "REST",
								"package": "@discordjs/rest"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.rest"
							}
						},
						{
							"id": 222,
							"name": "settings",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 21,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L21"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 223,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 228,
											"name": "debug",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "dev settings"
													}
												]
											},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 50,
													"character": 8,
													"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L50"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "..."
										},
										{
											"id": 225,
											"name": "global",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "optional settings"
													}
												]
											},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 45,
													"character": 8,
													"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L45"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "..."
										},
										{
											"id": 227,
											"name": "guilds",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 47,
													"character": 8,
													"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L47"
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 229,
											"name": "log",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 51,
													"character": 8,
													"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L51"
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 230,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 232,
															"name": "debug",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/client/XernerxClient.ts",
																	"line": 57,
																	"character": 12,
																	"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L57"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															},
															"defaultValue": "..."
														},
														{
															"id": 234,
															"name": "error",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/client/XernerxClient.ts",
																	"line": 55,
																	"character": 12,
																	"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L55"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															},
															"defaultValue": "..."
														},
														{
															"id": 233,
															"name": "info",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/client/XernerxClient.ts",
																	"line": 54,
																	"character": 12,
																	"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L54"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															},
															"defaultValue": "..."
														},
														{
															"id": 231,
															"name": "type",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/client/XernerxClient.ts",
																	"line": 53,
																	"character": 12,
																	"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L53"
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "literal",
																		"value": "static"
																	},
																	{
																		"type": "literal",
																		"value": "dynamic"
																	}
																]
															},
															"defaultValue": "..."
														},
														{
															"id": 235,
															"name": "warn",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/client/XernerxClient.ts",
																	"line": 56,
																	"character": 12,
																	"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L56"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															},
															"defaultValue": "..."
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [232, 234, 233, 231, 235]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/zod/lib/types.d.ts",
															"line": 1056,
															"character": 123
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 226,
											"name": "owners",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 46,
													"character": 8,
													"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L46"
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 224,
											"name": "token",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "required settings"
													}
												]
											},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 42,
													"character": 8,
													"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L42"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [228, 225, 227, 229, 226, 224]
										}
									],
									"sources": [
										{
											"fileName": "node_modules/zod/lib/types.d.ts",
											"line": 1056,
											"character": 123
										}
									]
								}
							}
						},
						{
							"id": 278,
							"name": "shard",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1016,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
											"qualifiedName": "ShardClientUtil"
										},
										"name": "ShardClientUtil",
										"package": "discord.js"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.shard"
							}
						},
						{
							"id": 236,
							"name": "stats",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 22,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L22"
								}
							],
							"type": {
								"type": "reference",
								"target": 497,
								"name": "XernerxStats",
								"package": "xernerx"
							}
						},
						{
							"id": 277,
							"name": "sweepers",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1015,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
									"qualifiedName": "Sweepers"
								},
								"name": "Sweepers",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.sweepers"
							}
						},
						{
							"id": 279,
							"name": "token",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1017,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.token"
							}
						},
						{
							"id": 282,
							"name": "user",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1019,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
											"qualifiedName": "ClientUser"
										},
										"name": "ClientUser",
										"package": "discord.js"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.user"
							}
						},
						{
							"id": 283,
							"name": "users",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1020,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
									"qualifiedName": "UserManager"
								},
								"name": "UserManager",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.users"
							}
						},
						{
							"id": 252,
							"name": "util",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 31,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L31"
								}
							],
							"type": {
								"type": "reference",
								"target": 535,
								"name": "ClientUtil",
								"package": "xernerx"
							}
						},
						{
							"id": 284,
							"name": "voice",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1021,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
									"qualifiedName": "ClientVoiceManager"
								},
								"name": "ClientVoiceManager",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.voice"
							}
						},
						{
							"id": 285,
							"name": "ws",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1022,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
									"qualifiedName": "WebSocketManager"
								},
								"name": "WebSocketManager",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.ws"
							}
						},
						{
							"id": 213,
							"name": "captureRejections",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default "
									},
									{
										"kind": "code",
										"text": "`captureRejections`"
									},
									{
										"kind": "text",
										"text": " option on all new "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " objects."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.4.0, v12.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 459,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.captureRejections"
							}
						},
						{
							"id": 212,
							"name": "captureRejectionSymbol",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Value: "
									},
									{
										"kind": "code",
										"text": "`Symbol.for('nodejs.rejection')`"
									},
									{
										"kind": "text",
										"text": "\n\nSee how to write a custom "
									},
									{
										"kind": "code",
										"text": "`rejection handler`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.4.0, v12.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 452,
									"character": 24
								}
							],
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 212,
									"name": "captureRejectionSymbol",
									"package": "@types/node",
									"qualifiedName": "EventEmitter.captureRejectionSymbol"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.captureRejectionSymbol"
							}
						},
						{
							"id": 214,
							"name": "defaultMaxListeners",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default, a maximum of "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners can be registered for any single\nevent. This limit can be changed for individual "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances\nusing the "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " method. To change the default\nfor _all_"
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances, the "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": " property\ncan be used. If this value is not a positive number, a "
									},
									{
										"kind": "code",
										"text": "`RangeError`"
									},
									{
										"kind": "text",
										"text": " is thrown.\n\nTake caution when setting the "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": " because the\nchange affects _all_ "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances, including those created before\nthe change is made. However, calling "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " still has\nprecedence over "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": ".\n\nThis is not a hard limit. The "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single\n"
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", the "
									},
									{
										"kind": "code",
										"text": "`emitter.getMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " methods can be used to\ntemporarily avoid this warning:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe "
									},
									{
										"kind": "code",
										"text": "`--trace-warnings`"
									},
									{
										"kind": "text",
										"text": " command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with "
									},
									{
										"kind": "code",
										"text": "`process.on('warning')`"
									},
									{
										"kind": "text",
										"text": " and will\nhave the additional "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`type`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`count`"
									},
									{
										"kind": "text",
										"text": " properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " property is set to "
									},
									{
										"kind": "code",
										"text": "`'MaxListenersExceededWarning'`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.2"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 498,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.defaultMaxListeners"
							}
						},
						{
							"id": 211,
							"name": "errorMonitor",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This symbol shall be used to install a listener for only monitoring "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " events. Listeners installed using this symbol are called before the regular "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is emitted. Therefore, the process will still crash if no\nregular "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " listener is installed."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.17.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 445,
									"character": 24
								}
							],
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 211,
									"name": "errorMonitor",
									"package": "@types/node",
									"qualifiedName": "EventEmitter.errorMonitor"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.errorMonitor"
							}
						},
						{
							"id": 268,
							"name": "emojis",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1010,
									"character": 13
								}
							],
							"getSignature": {
								"id": 269,
								"name": "emojis",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 1010,
										"character": 13
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
										"qualifiedName": "BaseGuildEmojiManager"
									},
									"name": "BaseGuildEmojiManager",
									"package": "discord.js"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "Discord.Client.emojis"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.emojis"
							}
						},
						{
							"id": 274,
							"name": "readyAt",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1013,
									"character": 13
								}
							],
							"getSignature": {
								"id": 275,
								"name": "readyAt",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 1013,
										"character": 13
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
										"qualifiedName": "If"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
												"qualifiedName": "Client.Ready"
											},
											"name": "Ready",
											"package": "discord.js",
											"qualifiedName": "Client.Ready",
											"refersToTypeParameter": true
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Date"
											},
											"name": "Date",
											"package": "typescript"
										},
										{
											"type": "literal",
											"value": null
										}
									],
									"name": "If",
									"package": "discord.js"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "Discord.Client.readyAt"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.readyAt"
							}
						},
						{
							"id": 280,
							"name": "uptime",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1018,
									"character": 13
								}
							],
							"getSignature": {
								"id": 281,
								"name": "uptime",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 1018,
										"character": 13
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
										"qualifiedName": "If"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
												"qualifiedName": "Client.Ready"
											},
											"name": "Ready",
											"package": "discord.js",
											"qualifiedName": "Client.Ready",
											"refersToTypeParameter": true
										},
										{
											"type": "intrinsic",
											"name": "number"
										},
										{
											"type": "literal",
											"value": null
										}
									],
									"name": "If",
									"package": "discord.js"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "Discord.Client.uptime"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.uptime"
							}
						},
						{
							"id": 395,
							"name": "[asyncDispose]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 536,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 396,
									"name": "[asyncDispose]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 536,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.[asyncDispose]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.[asyncDispose]"
							}
						},
						{
							"id": 397,
							"name": "[captureRejectionSymbol]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 136,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 398,
									"name": "[captureRejectionSymbol]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 136,
											"character": 8
										}
									],
									"typeParameters": [
										{
											"id": 399,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 400,
											"name": "error",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Error"
												},
												"name": "Error",
												"package": "typescript"
											}
										},
										{
											"id": 401,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 402,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/events.d.ts",
													"qualifiedName": "AnyRest"
												},
												"name": "AnyRest",
												"package": "@types/node"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.[captureRejectionSymbol]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.[captureRejectionSymbol]"
							}
						},
						{
							"id": 403,
							"name": "addListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 597,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 404,
									"name": "addListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Alias for "
											},
											{
												"kind": "code",
												"text": "`emitter.on(eventName, listener)`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 597,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 405,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 406,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 407,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 408,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"signatures": [
														{
															"id": 409,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 117,
																	"character": 42
																}
															],
															"parameters": [
																{
																	"id": 410,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.addListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.addListener"
							}
						},
						{
							"id": 288,
							"name": "deleteWebhook",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1024,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 289,
									"name": "deleteWebhook",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1024,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 290,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 291,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "WebhookDeleteOptions"
												},
												"name": "WebhookDeleteOptions",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.deleteWebhook"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.deleteWebhook"
							}
						},
						{
							"id": 286,
							"name": "destroy",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1023,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 287,
									"name": "destroy",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1023,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.destroy"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.destroy"
							}
						},
						{
							"id": 363,
							"name": "emit",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1053,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1054,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 364,
									"name": "emit",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Synchronously calls each of the listeners registered for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
											},
											{
												"kind": "code",
												"text": "`true`"
											},
											{
												"kind": "text",
												"text": " if the event had listeners, "
											},
											{
												"kind": "code",
												"text": "`false`"
											},
											{
												"kind": "text",
												"text": " otherwise.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1053,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 365,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 366,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 365,
												"name": "Event",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 367,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "indexedAccess",
												"indexType": {
													"type": "reference",
													"target": 365,
													"name": "Event",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"objectType": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.emit"
									}
								},
								{
									"id": 368,
									"name": "emit",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Synchronously calls each of the listeners registered for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
											},
											{
												"kind": "code",
												"text": "`true`"
											},
											{
												"kind": "text",
												"text": " if the event had listeners, "
											},
											{
												"kind": "code",
												"text": "`false`"
											},
											{
												"kind": "text",
												"text": " otherwise.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1054,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 369,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 370,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Exclude"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 369,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													{
														"type": "typeOperator",
														"operator": "keyof",
														"target": {
															"type": "reference",
															"target": {
																"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
																"qualifiedName": "ClientEvents"
															},
															"name": "ClientEvents",
															"package": "discord.js"
														}
													}
												],
												"name": "Exclude",
												"package": "typescript"
											}
										},
										{
											"id": 371,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.emit"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.emit"
							}
						},
						{
							"id": 453,
							"name": "eventNames",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 922,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 454,
									"name": "eventNames",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
											},
											{
												"kind": "code",
												"text": "`Symbol`"
											},
											{
												"kind": "text",
												"text": "s.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 922,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "intrinsic",
													"name": "symbol"
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.eventNames"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.eventNames"
							}
						},
						{
							"id": 292,
							"name": "fetchGuildPreview",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1025,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 293,
									"name": "fetchGuildPreview",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1025,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 294,
											"name": "guild",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "GuildResolvable"
												},
												"name": "GuildResolvable",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "GuildPreview"
												},
												"name": "GuildPreview",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchGuildPreview"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchGuildPreview"
							}
						},
						{
							"id": 299,
							"name": "fetchGuildTemplate",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1027,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 300,
									"name": "fetchGuildTemplate",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1027,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 301,
											"name": "template",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "GuildTemplate"
												},
												"name": "GuildTemplate",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchGuildTemplate"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchGuildTemplate"
							}
						},
						{
							"id": 320,
							"name": "fetchGuildWidget",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1035,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 321,
									"name": "fetchGuildWidget",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1035,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 322,
											"name": "guild",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "GuildResolvable"
												},
												"name": "GuildResolvable",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "Widget"
												},
												"name": "Widget",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchGuildWidget"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchGuildWidget"
							}
						},
						{
							"id": 295,
							"name": "fetchInvite",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1026,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 296,
									"name": "fetchInvite",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1026,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 297,
											"name": "invite",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 298,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "ClientFetchInviteOptions"
												},
												"name": "ClientFetchInviteOptions",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "Invite"
												},
												"name": "Invite",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchInvite"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchInvite"
							}
						},
						{
							"id": 314,
							"name": "fetchPremiumStickerPacks",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1033,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 315,
									"name": "fetchPremiumStickerPacks",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [],
										"blockTags": [
											{
												"tag": "@deprecated",
												"content": [
													{
														"kind": "text",
														"text": "Use "
													},
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "Client.fetchStickerPacks",
														"target": {
															"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
															"qualifiedName": "Client.fetchStickerPacks"
														}
													},
													{
														"kind": "text",
														"text": " instead."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1033,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@discordjs/collection/dist/index.d.ts",
													"qualifiedName": "Collection"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
															"qualifiedName": "StickerPack"
														},
														"name": "StickerPack",
														"package": "discord.js"
													}
												],
												"name": "Collection",
												"package": "@discordjs/collection"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchPremiumStickerPacks"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchPremiumStickerPacks"
							}
						},
						{
							"id": 304,
							"name": "fetchSticker",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1029,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 305,
									"name": "fetchSticker",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1029,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 306,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "Sticker"
												},
												"name": "Sticker",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchSticker"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchSticker"
							}
						},
						{
							"id": 307,
							"name": "fetchStickerPacks",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1030,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1031,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 308,
									"name": "fetchStickerPacks",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1030,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 309,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 310,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 311,
															"name": "packId",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1030,
																	"character": 38
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [311]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1030,
															"character": 36
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "StickerPack"
												},
												"name": "StickerPack",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchStickerPacks"
									}
								},
								{
									"id": 312,
									"name": "fetchStickerPacks",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1031,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 313,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "StickerPackFetchOptions"
												},
												"name": "StickerPackFetchOptions",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@discordjs/collection/dist/index.d.ts",
													"qualifiedName": "Collection"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
															"qualifiedName": "StickerPack"
														},
														"name": "StickerPack",
														"package": "discord.js"
													}
												],
												"name": "Collection",
												"package": "@discordjs/collection"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchStickerPacks"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchStickerPacks"
							}
						},
						{
							"id": 302,
							"name": "fetchVoiceRegions",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1028,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 303,
									"name": "fetchVoiceRegions",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1028,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@discordjs/collection/dist/index.d.ts",
													"qualifiedName": "Collection"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
															"qualifiedName": "VoiceRegion"
														},
														"name": "VoiceRegion",
														"package": "discord.js"
													}
												],
												"name": "Collection",
												"package": "@discordjs/collection"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchVoiceRegions"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchVoiceRegions"
							}
						},
						{
							"id": 316,
							"name": "fetchWebhook",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1034,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 317,
									"name": "fetchWebhook",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1034,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 318,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 319,
											"name": "token",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "Webhook"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/discord.js/node_modules/discord-api-types/payloads/v10/webhook.ts",
															"qualifiedName": "WebhookType"
														},
														"name": "WebhookType",
														"package": "discord-api-types"
													}
												],
												"name": "Webhook",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.fetchWebhook"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.fetchWebhook"
							}
						},
						{
							"id": 323,
							"name": "generateInvite",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1036,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 324,
									"name": "generateInvite",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1036,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 325,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
													"qualifiedName": "InviteGenerationOptions"
												},
												"name": "InviteGenerationOptions",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.generateInvite"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.generateInvite"
							}
						},
						{
							"id": 422,
							"name": "getMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 774,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 423,
									"name": "getMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the current max listener value for the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " which is either\nset by "
											},
											{
												"kind": "code",
												"text": "`emitter.setMaxListeners(n)`"
											},
											{
												"kind": "text",
												"text": " or defaults to "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "defaultMaxListeners",
												"target": 214
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v1.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 774,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.getMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.getMaxListeners"
							}
						},
						{
							"id": 329,
							"name": "isReady",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1038,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 330,
									"name": "isReady",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1038,
											"character": 9
										}
									],
									"type": {
										"type": "predicate",
										"name": "this",
										"asserts": false,
										"targetType": {
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
												"qualifiedName": "Client"
											},
											"typeArguments": [
												{
													"type": "literal",
													"value": true
												}
											],
											"name": "Client",
											"package": "discord.js"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.isReady"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.isReady"
							}
						},
						{
							"id": 432,
							"name": "listenerCount",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 868,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 433,
									"name": "listenerCount",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the number of listeners listening for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\nIf "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " is provided, it will return how many times the listener is found\nin the list of the listeners of the event."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v3.2.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 868,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 434,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 435,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event being listened for"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 436,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The event handler function"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Function"
												},
												"name": "Function",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.listenerCount"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.listenerCount"
							}
						},
						{
							"id": 424,
							"name": "listeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 787,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 425,
									"name": "listeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 787,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 426,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 427,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.listeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.listeners"
							}
						},
						{
							"id": 326,
							"name": "login",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1037,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 327,
									"name": "login",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1037,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 328,
											"name": "token",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.login"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.login"
							}
						},
						{
							"id": 372,
							"name": "off",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1056,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1057,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 373,
									"name": "off",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Alias for "
											},
											{
												"kind": "code",
												"text": "`emitter.removeListener()`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v10.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1056,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 374,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 375,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 374,
												"name": "Event",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 376,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 377,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1056,
															"character": 71
														}
													],
													"signatures": [
														{
															"id": 378,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1056,
																	"character": 71
																}
															],
															"parameters": [
																{
																	"id": 379,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "indexedAccess",
																		"indexType": {
																			"type": "reference",
																			"target": 374,
																			"name": "Event",
																			"package": "discord.js",
																			"refersToTypeParameter": true
																		},
																		"objectType": {
																			"type": "reference",
																			"target": {
																				"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
																				"qualifiedName": "ClientEvents"
																			},
																			"name": "ClientEvents",
																			"package": "discord.js"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.off"
									}
								},
								{
									"id": 380,
									"name": "off",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Alias for "
											},
											{
												"kind": "code",
												"text": "`emitter.removeListener()`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v10.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1057,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 381,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 382,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Exclude"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 381,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													{
														"type": "typeOperator",
														"operator": "keyof",
														"target": {
															"type": "reference",
															"target": {
																"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
																"qualifiedName": "ClientEvents"
															},
															"name": "ClientEvents",
															"package": "discord.js"
														}
													}
												],
												"name": "Exclude",
												"package": "typescript"
											}
										},
										{
											"id": 383,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 384,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1059,
															"character": 14
														}
													],
													"signatures": [
														{
															"id": 385,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1059,
																	"character": 14
																}
															],
															"parameters": [
																{
																	"id": 386,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.off"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.off"
							}
						},
						{
							"id": 333,
							"name": "on",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1041,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1042,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 334,
									"name": "on",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function to the end of the listeners array for the event\nnamed "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ". No checks are made to see if the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " has already\nbeen added. Multiple calls passing the same combination of "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " and\n"
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " will result in the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " being added, and called, multiple times.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The "
											},
											{
												"kind": "code",
												"text": "`emitter.prependListener()`"
											},
											{
												"kind": "text",
												"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.101"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1041,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 335,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 336,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 335,
												"name": "Event",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 337,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 338,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1041,
															"character": 70
														}
													],
													"signatures": [
														{
															"id": 339,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1041,
																	"character": 70
																}
															],
															"parameters": [
																{
																	"id": 340,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "indexedAccess",
																		"indexType": {
																			"type": "reference",
																			"target": 335,
																			"name": "Event",
																			"package": "discord.js",
																			"refersToTypeParameter": true
																		},
																		"objectType": {
																			"type": "reference",
																			"target": {
																				"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
																				"qualifiedName": "ClientEvents"
																			},
																			"name": "ClientEvents",
																			"package": "discord.js"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.on"
									}
								},
								{
									"id": 341,
									"name": "on",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function to the end of the listeners array for the event\nnamed "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ". No checks are made to see if the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " has already\nbeen added. Multiple calls passing the same combination of "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " and\n"
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " will result in the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " being added, and called, multiple times.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The "
											},
											{
												"kind": "code",
												"text": "`emitter.prependListener()`"
											},
											{
												"kind": "text",
												"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.101"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1042,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 342,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 343,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Exclude"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 342,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													{
														"type": "typeOperator",
														"operator": "keyof",
														"target": {
															"type": "reference",
															"target": {
																"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
																"qualifiedName": "ClientEvents"
															},
															"name": "ClientEvents",
															"package": "discord.js"
														}
													}
												],
												"name": "Exclude",
												"package": "typescript"
											}
										},
										{
											"id": 344,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 345,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1044,
															"character": 14
														}
													],
													"signatures": [
														{
															"id": 346,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1044,
																	"character": 14
																}
															],
															"parameters": [
																{
																	"id": 347,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.on"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.on"
							}
						},
						{
							"id": 348,
							"name": "once",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1047,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1048,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 349,
									"name": "once",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a **one-time** "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ". The\nnext time "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " is triggered, this listener is removed and then invoked.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The "
											},
											{
												"kind": "code",
												"text": "`emitter.prependOnceListener()`"
											},
											{
												"kind": "text",
												"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.3.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1047,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 350,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 351,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 350,
												"name": "Event",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 352,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 353,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1047,
															"character": 72
														}
													],
													"signatures": [
														{
															"id": 354,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1047,
																	"character": 72
																}
															],
															"parameters": [
																{
																	"id": 355,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "indexedAccess",
																		"indexType": {
																			"type": "reference",
																			"target": 350,
																			"name": "Event",
																			"package": "discord.js",
																			"refersToTypeParameter": true
																		},
																		"objectType": {
																			"type": "reference",
																			"target": {
																				"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
																				"qualifiedName": "ClientEvents"
																			},
																			"name": "ClientEvents",
																			"package": "discord.js"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.once"
									}
								},
								{
									"id": 356,
									"name": "once",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a **one-time** "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ". The\nnext time "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " is triggered, this listener is removed and then invoked.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The "
											},
											{
												"kind": "code",
												"text": "`emitter.prependOnceListener()`"
											},
											{
												"kind": "text",
												"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.3.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1048,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 357,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 358,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Exclude"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 357,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													{
														"type": "typeOperator",
														"operator": "keyof",
														"target": {
															"type": "reference",
															"target": {
																"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
																"qualifiedName": "ClientEvents"
															},
															"name": "ClientEvents",
															"package": "discord.js"
														}
													}
												],
												"name": "Exclude",
												"package": "typescript"
											}
										},
										{
											"id": 359,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 360,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1050,
															"character": 14
														}
													],
													"signatures": [
														{
															"id": 361,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1050,
																	"character": 14
																}
															],
															"parameters": [
																{
																	"id": 362,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.once"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.once"
							}
						},
						{
							"id": 437,
							"name": "prependListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 886,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 438,
									"name": "prependListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function to the _beginning_ of the listeners array for the\nevent named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ". No checks are made to see if the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " has\nalready been added. Multiple calls passing the same combination of "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": "\nand "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " will result in the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " being added, and called, multiple times.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 886,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 439,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 440,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 441,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 442,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"signatures": [
														{
															"id": 443,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 117,
																	"character": 42
																}
															],
															"parameters": [
																{
																	"id": 444,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.prependListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.prependListener"
							}
						},
						{
							"id": 445,
							"name": "prependOnceListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 902,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 446,
									"name": "prependOnceListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a **one-time**"
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " to the _beginning_ of the listeners array. The next time "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 902,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 447,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 448,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 449,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 450,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"signatures": [
														{
															"id": 451,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 117,
																	"character": 42
																}
															],
															"parameters": [
																{
																	"id": 452,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.prependOnceListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.prependOnceListener"
							}
						},
						{
							"id": 428,
							"name": "rawListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 818,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 429,
									"name": "rawListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ",\nincluding any wrappers (such as those created by "
											},
											{
												"kind": "code",
												"text": "`.once()`"
											},
											{
												"kind": "text",
												"text": ").\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v9.4.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 818,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 430,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 431,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.rawListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.rawListeners"
							}
						},
						{
							"id": 387,
							"name": "removeAllListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1062,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1063,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 388,
									"name": "removeAllListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Removes all listeners, or those of the specified "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1062,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 389,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 390,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": 389,
												"name": "Event",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.removeAllListeners"
									}
								},
								{
									"id": 391,
									"name": "removeAllListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Removes all listeners, or those of the specified "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1063,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 392,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 393,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Exclude"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 392,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													{
														"type": "typeOperator",
														"operator": "keyof",
														"target": {
															"type": "reference",
															"target": {
																"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
																"qualifiedName": "ClientEvents"
															},
															"name": "ClientEvents",
															"package": "discord.js"
														}
													}
												],
												"name": "Exclude",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.removeAllListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.removeAllListeners"
							}
						},
						{
							"id": 411,
							"name": "removeListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 742,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 412,
									"name": "removeListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Removes the specified "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " from the listener array for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
											},
											{
												"kind": "text",
												"text": "\n\n"
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ", then "
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any "
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`removeAllListeners()`"
											},
											{
												"kind": "text",
												"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
											},
											{
												"kind": "code",
												"text": "`emit()`"
											},
											{
												"kind": "text",
												"text": " in progress. Subsequent events behave as expected.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
											},
											{
												"kind": "code",
												"text": "`emitter.listeners()`"
											},
											{
												"kind": "text",
												"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " will remove the most\nrecently added instance. In the example the "
											},
											{
												"kind": "code",
												"text": "`once('ping')`"
											},
											{
												"kind": "text",
												"text": " listener is removed:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 742,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 413,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 414,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 415,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 416,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"signatures": [
														{
															"id": 417,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 117,
																	"character": 42
																}
															],
															"parameters": [
																{
																	"id": 418,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.removeListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.removeListener"
							}
						},
						{
							"id": 419,
							"name": "setMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 768,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 420,
									"name": "setMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "By default "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": "s will print a warning if more than "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
											},
											{
												"kind": "code",
												"text": "`emitter.setMaxListeners()`"
											},
											{
												"kind": "text",
												"text": " method allows the limit to be\nmodified for this specific "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " instance. The value can be set to "
											},
											{
												"kind": "code",
												"text": "`Infinity`"
											},
											{
												"kind": "text",
												"text": " (or "
											},
											{
												"kind": "code",
												"text": "`0`"
											},
											{
												"kind": "text",
												"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.3.5"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 768,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 421,
											"name": "n",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.setMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.setMaxListeners"
							}
						},
						{
							"id": 331,
							"name": "toJSON",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1039,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 332,
									"name": "toJSON",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1039,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.toJSON"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.toJSON"
							}
						},
						{
							"id": 204,
							"name": "addAbortListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 437,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 205,
									"name": "addAbortListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Listens once to the "
											},
											{
												"kind": "code",
												"text": "`abort`"
											},
											{
												"kind": "text",
												"text": " event on the provided "
											},
											{
												"kind": "code",
												"text": "`signal`"
											},
											{
												"kind": "text",
												"text": ".\n\nListening to the "
											},
											{
												"kind": "code",
												"text": "`abort`"
											},
											{
												"kind": "text",
												"text": " event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall "
											},
											{
												"kind": "code",
												"text": "`e.stopImmediatePropagation()`"
											},
											{
												"kind": "text",
												"text": ". Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using "
											},
											{
												"kind": "code",
												"text": "`AbortSignal`"
											},
											{
												"kind": "text",
												"text": "s in Node.js APIs by solving these\ntwo issues by listening to the event such that "
											},
											{
												"kind": "code",
												"text": "`stopImmediatePropagation`"
											},
											{
												"kind": "text",
												"text": " does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v20.5.0"
													}
												]
											},
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Disposable that removes the "
													},
													{
														"kind": "code",
														"text": "`abort`"
													},
													{
														"kind": "text",
														"text": " listener."
													}
												]
											}
										],
										"modifierTags": ["@experimental"]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 437,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 206,
											"name": "signal",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/globals.d.ts",
													"qualifiedName": "__global.AbortSignal"
												},
												"name": "AbortSignal",
												"package": "@types/node",
												"qualifiedName": "__global.AbortSignal"
											}
										},
										{
											"id": 207,
											"name": "resource",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 208,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 437,
															"character": 63
														}
													],
													"signatures": [
														{
															"id": 209,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 437,
																	"character": 63
																}
															],
															"parameters": [
																{
																	"id": 210,
																	"name": "event",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "node_modules/@types/node/dom-events.d.ts",
																			"qualifiedName": "__global.Event"
																		},
																		"name": "Event",
																		"package": "@types/node",
																		"qualifiedName": "__global.Event"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.esnext.disposable.d.ts",
											"qualifiedName": "Disposable"
										},
										"name": "Disposable",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.addAbortListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.addAbortListener"
							}
						},
						{
							"id": 193,
							"name": "getEventListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 358,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 194,
									"name": "getEventListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": "s this behaves exactly the same as calling "
											},
											{
												"kind": "code",
												"text": "`.listeners`"
											},
											{
												"kind": "text",
												"text": " on\nthe emitter.\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v15.2.0, v14.17.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 358,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 195,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@types/node/events.d.ts",
															"qualifiedName": "__global.NodeJS.EventEmitter"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/@types/node/events.d.ts",
																	"qualifiedName": "DefaultEventMap"
																},
																"name": "DefaultEventMap",
																"package": "@types/node"
															}
														],
														"name": "EventEmitter",
														"package": "@types/node",
														"qualifiedName": "__global.NodeJS.EventEmitter"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@types/node/dom-events.d.ts",
															"qualifiedName": "__global.EventTarget"
														},
														"name": "EventTarget",
														"package": "@types/node",
														"qualifiedName": "__global.EventTarget"
													}
												]
											}
										},
										{
											"id": 196,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.getEventListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.getEventListeners"
							}
						},
						{
							"id": 197,
							"name": "getMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 387,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 198,
									"name": "getMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the currently set max amount of listeners.\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": "s this behaves exactly the same as calling "
											},
											{
												"kind": "code",
												"text": "`.getMaxListeners`"
											},
											{
												"kind": "text",
												"text": " on\nthe emitter.\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": "s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v19.9.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 387,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 199,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@types/node/events.d.ts",
															"qualifiedName": "__global.NodeJS.EventEmitter"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/@types/node/events.d.ts",
																	"qualifiedName": "DefaultEventMap"
																},
																"name": "DefaultEventMap",
																"package": "@types/node"
															}
														],
														"name": "EventEmitter",
														"package": "@types/node",
														"qualifiedName": "__global.NodeJS.EventEmitter"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@types/node/dom-events.d.ts",
															"qualifiedName": "__global.EventTarget"
														},
														"name": "EventTarget",
														"package": "@types/node",
														"qualifiedName": "__global.EventTarget"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.getMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.getMaxListeners"
							}
						},
						{
							"id": 189,
							"name": "listenerCount",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 330,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 190,
									"name": "listenerCount",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A class method that returns the number of listeners for the given "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " registered on the given "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											},
											{
												"kind": "text",
												"text": ".\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.9.12"
													}
												]
											},
											{
												"tag": "@deprecated",
												"content": [
													{
														"kind": "text",
														"text": "Since v3.2.0 - Use "
													},
													{
														"kind": "code",
														"text": "`listenerCount`"
													},
													{
														"kind": "text",
														"text": " instead."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 330,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 191,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The emitter to query"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@types/node/events.d.ts",
															"qualifiedName": "DefaultEventMap"
														},
														"name": "DefaultEventMap",
														"package": "@types/node"
													}
												],
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											}
										},
										{
											"id": 192,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The event name"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.listenerCount"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.listenerCount"
							}
						},
						{
							"id": 180,
							"name": "on",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1002,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 181,
									"name": "on",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns an "
											},
											{
												"kind": "code",
												"text": "`AsyncIterator`"
											},
											{
												"kind": "text",
												"text": " that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events. It will throw\nif the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " emits "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": ". It removes all listeners when\nexiting the loop. The "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
											},
											{
												"kind": "code",
												"text": "`AbortSignal`"
											},
											{
												"kind": "text",
												"text": " can be used to cancel waiting on events:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
											},
											{
												"kind": "text",
												"text": "\n\nUse the "
											},
											{
												"kind": "code",
												"text": "`close`"
											},
											{
												"kind": "text",
												"text": " option to specify an array of event names that will end the iteration:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n  ee.emit('close');\n});\n\nfor await (const event of on(ee, 'foo', { close: ['close'] })) {\n  console.log(event); // prints ['bar'] [42]\n}\n// the loop will exit after 'close' is emitted\nconsole.log('done'); // prints 'done'\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v13.6.0, v12.16.0"
													}
												]
											},
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "An "
													},
													{
														"kind": "code",
														"text": "`AsyncIterator`"
													},
													{
														"kind": "text",
														"text": " that iterates "
													},
													{
														"kind": "code",
														"text": "`eventName`"
													},
													{
														"kind": "text",
														"text": " events emitted by the "
													},
													{
														"kind": "code",
														"text": "`emitter`"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1002,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 182,
											"name": "Emitter",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/events.d.ts",
													"qualifiedName": "EventEmitter"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@types/node/events.d.ts",
															"qualifiedName": "DefaultEventMap"
														},
														"name": "DefaultEventMap",
														"package": "@types/node"
													}
												],
												"name": "EventEmitter",
												"package": "@types/node"
											}
										},
										{
											"id": 183,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 184,
											"name": "eventEmitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 182,
												"name": "Emitter",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 185,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "conditional",
												"checkType": {
													"type": "reference",
													"target": 182,
													"name": "Emitter",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"extendsType": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "Client"
													},
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "boolean"
														}
													],
													"name": "Client",
													"package": "discord.js"
												},
												"trueType": {
													"type": "reference",
													"target": 183,
													"name": "Event",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"falseType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "intrinsic",
															"name": "symbol"
														}
													]
												}
											}
										},
										{
											"id": 186,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 187,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 188,
															"name": "signal",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1005,
																	"character": 16
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/@types/node/globals.d.ts",
																	"qualifiedName": "__global.AbortSignal"
																},
																"name": "AbortSignal",
																"package": "@types/node",
																"qualifiedName": "__global.AbortSignal"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [188]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1005,
															"character": 14
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
											"qualifiedName": "AsyncIterableIterator"
										},
										"typeArguments": [
											{
												"type": "conditional",
												"checkType": {
													"type": "reference",
													"target": 182,
													"name": "Emitter",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"extendsType": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "Client"
													},
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "boolean"
														}
													],
													"name": "Client",
													"package": "discord.js"
												},
												"trueType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "reference",
														"target": 183,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													"objectType": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
															"qualifiedName": "ClientEvents"
														},
														"name": "ClientEvents",
														"package": "discord.js"
													}
												},
												"falseType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "AsyncIterableIterator",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.on"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.on"
							}
						},
						{
							"id": 171,
							"name": "once",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 997,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 172,
									"name": "once",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Override inherited static EventEmitter methods, with added type checks for Client events."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 997,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 173,
											"name": "Emitter",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/events.d.ts",
													"qualifiedName": "EventEmitter"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/@types/node/events.d.ts",
															"qualifiedName": "DefaultEventMap"
														},
														"name": "DefaultEventMap",
														"package": "@types/node"
													}
												],
												"name": "EventEmitter",
												"package": "@types/node"
											}
										},
										{
											"id": 174,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 175,
											"name": "eventEmitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 173,
												"name": "Emitter",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 176,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "conditional",
												"checkType": {
													"type": "reference",
													"target": 173,
													"name": "Emitter",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"extendsType": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "Client"
													},
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "boolean"
														}
													],
													"name": "Client",
													"package": "discord.js"
												},
												"trueType": {
													"type": "reference",
													"target": 174,
													"name": "Event",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"falseType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "intrinsic",
															"name": "symbol"
														}
													]
												}
											}
										},
										{
											"id": 177,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 178,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 179,
															"name": "signal",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1000,
																	"character": 16
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/@types/node/globals.d.ts",
																	"qualifiedName": "__global.AbortSignal"
																},
																"name": "AbortSignal",
																"package": "@types/node",
																"qualifiedName": "__global.AbortSignal"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [179]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1000,
															"character": 14
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "conditional",
												"checkType": {
													"type": "reference",
													"target": 173,
													"name": "Emitter",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"extendsType": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
														"qualifiedName": "Client"
													},
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "boolean"
														}
													],
													"name": "Client",
													"package": "discord.js"
												},
												"trueType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "reference",
														"target": 174,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													"objectType": {
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
															"qualifiedName": "ClientEvents"
														},
														"name": "ClientEvents",
														"package": "discord.js"
													}
												},
												"falseType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.once"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.once"
							}
						},
						{
							"id": 200,
							"name": "setMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 402,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 201,
									"name": "setMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "code",
												"text": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v15.4.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 402,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 202,
											"name": "n",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A non-negative number. The maximum number of listeners per "
													},
													{
														"kind": "code",
														"text": "`EventTarget`"
													},
													{
														"kind": "text",
														"text": " event."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 203,
											"name": "eventTargets",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"target": {
																"sourceFileName": "node_modules/@types/node/events.d.ts",
																"qualifiedName": "__global.NodeJS.EventEmitter"
															},
															"typeArguments": [
																{
																	"type": "reference",
																	"target": {
																		"sourceFileName": "node_modules/@types/node/events.d.ts",
																		"qualifiedName": "DefaultEventMap"
																	},
																	"name": "DefaultEventMap",
																	"package": "@types/node"
																}
															],
															"name": "EventEmitter",
															"package": "@types/node",
															"qualifiedName": "__global.NodeJS.EventEmitter"
														},
														{
															"type": "reference",
															"target": {
																"sourceFileName": "node_modules/@types/node/dom-events.d.ts",
																"qualifiedName": "__global.EventTarget"
															},
															"name": "EventTarget",
															"package": "@types/node",
															"qualifiedName": "__global.EventTarget"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Discord.Client.setMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Discord.Client.setMaxListeners"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [215]
						},
						{
							"title": "Properties",
							"children": [266, 267, 253, 258, 270, 259, 237, 271, 276, 394, 222, 278, 236, 277, 279, 282, 283, 252, 284, 285, 213, 212, 214, 211]
						},
						{
							"title": "Accessors",
							"children": [268, 274, 280]
						},
						{
							"title": "Methods",
							"children": [
								395, 397, 403, 288, 286, 363, 453, 292, 299, 320, 295, 314, 304, 307, 302, 316, 323, 422, 329, 432, 424, 326, 372, 333, 348, 437, 445, 428, 387, 411, 419, 331, 204, 193, 197, 189, 180,
								171, 200
							]
						}
					],
					"sources": [
						{
							"fileName": "src/client/XernerxClient.ts",
							"line": 20,
							"character": 13,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L20"
						}
					],
					"typeParameters": [
						{
							"id": 455,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "reflection",
								"declaration": {
									"id": 456,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "src/client/XernerxClient.ts",
											"line": 20,
											"character": 31,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L20"
										}
									]
								}
							}
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
								"qualifiedName": "Client"
							},
							"name": "Client",
							"package": "discord.js"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [170]
				}
			],
			"sources": [
				{
					"fileName": "src/client/XernerxClient.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/client/XernerxClient.ts#L1"
				}
			]
		},
		{
			"id": 457,
			"name": "handlers/CommandHandler",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 458,
					"name": "CommandHandler",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 459,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/handlers/CommandHandler.ts",
									"line": 19,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/CommandHandler.ts#L19"
								}
							],
							"signatures": [
								{
									"id": 460,
									"name": "new CommandHandler",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/handlers/CommandHandler.ts",
											"line": 19,
											"character": 2,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/CommandHandler.ts#L19"
										}
									],
									"parameters": [
										{
											"id": 461,
											"name": "client",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 170,
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 462,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {}
														}
													}
												],
												"name": "XernerxClient",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 458,
										"name": "CommandHandler",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 483,
										"name": "Handler.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 482,
								"name": "Handler.constructor"
							}
						},
						{
							"id": 472,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/handlers/Handler.ts",
									"line": 14,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/Handler.ts#L14"
								}
							],
							"type": {
								"type": "reference",
								"target": 170,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 473,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {}
										}
									}
								],
								"name": "XernerxClient",
								"package": "xernerx"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 486,
								"name": "Handler.client"
							}
						},
						{
							"id": 477,
							"name": "load",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isProtected": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/handlers/Handler.ts",
									"line": 46,
									"character": 18,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/Handler.ts#L46"
								}
							],
							"signatures": [
								{
									"id": 478,
									"name": "load",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "src/handlers/Handler.ts",
											"line": 46,
											"character": 18,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/Handler.ts#L46"
										}
									],
									"parameters": [
										{
											"id": 479,
											"name": "filepath",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"target": 530,
														"name": "XernerxFile",
														"package": "xernerx"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 492,
										"name": "Handler.load"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 491,
								"name": "Handler.load"
							}
						},
						{
							"id": 469,
							"name": "loadContextCommands",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/handlers/CommandHandler.ts",
									"line": 65,
									"character": 18,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/CommandHandler.ts#L65"
								}
							],
							"signatures": [
								{
									"id": 470,
									"name": "loadContextCommands",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/handlers/CommandHandler.ts",
											"line": 65,
											"character": 18,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/CommandHandler.ts#L65"
										}
									],
									"parameters": [
										{
											"id": 471,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 525,
												"name": "XernerxContextCommandHandlerOptions",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 466,
							"name": "loadMessageCommands",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/handlers/CommandHandler.ts",
									"line": 62,
									"character": 18,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/CommandHandler.ts#L62"
								}
							],
							"signatures": [
								{
									"id": 467,
									"name": "loadMessageCommands",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Loads message commands from the specified directory.\n\nThis method iterates through the files in the given directory,\nattempts to load each file as a message command, and updates the\ncommand statistics accordingly."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "- A promise that resolves when all message commands have been loaded."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/handlers/CommandHandler.ts",
											"line": 62,
											"character": 18,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/CommandHandler.ts#L62"
										}
									],
									"parameters": [
										{
											"id": 468,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The options for loading message commands."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 522,
												"name": "XernerxMessageCommandHandlerOptions",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 463,
							"name": "loadSlashCommands",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/handlers/CommandHandler.ts",
									"line": 23,
									"character": 18,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/CommandHandler.ts#L23"
								}
							],
							"signatures": [
								{
									"id": 464,
									"name": "loadSlashCommands",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/handlers/CommandHandler.ts",
											"line": 23,
											"character": 18,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/CommandHandler.ts#L23"
										}
									],
									"parameters": [
										{
											"id": 465,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 519,
												"name": "XernerxSlashCommandHandlerOptions",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 474,
							"name": "readdir",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isProtected": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/handlers/Handler.ts",
									"line": 20,
									"character": 18,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/Handler.ts#L20"
								}
							],
							"signatures": [
								{
									"id": 475,
									"name": "readdir",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "src/handlers/Handler.ts",
											"line": 20,
											"character": 18,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/Handler.ts#L20"
										}
									],
									"parameters": [
										{
											"id": 476,
											"name": "directory",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 489,
										"name": "Handler.readdir"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 488,
								"name": "Handler.readdir"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [459]
						},
						{
							"title": "Properties",
							"children": [472]
						},
						{
							"title": "Methods",
							"children": [477, 469, 466, 463, 474]
						}
					],
					"sources": [
						{
							"fileName": "src/handlers/CommandHandler.ts",
							"line": 18,
							"character": 13,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/CommandHandler.ts#L18"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 481,
							"name": "Handler",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [458]
				}
			],
			"sources": [
				{
					"fileName": "src/handlers/CommandHandler.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/CommandHandler.ts#L1"
				}
			]
		},
		{
			"id": 480,
			"name": "handlers/Handler",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 481,
					"name": "Handler",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 482,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/handlers/Handler.ts",
									"line": 16,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/Handler.ts#L16"
								}
							],
							"signatures": [
								{
									"id": 483,
									"name": "new Handler",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/handlers/Handler.ts",
											"line": 16,
											"character": 2,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/Handler.ts#L16"
										}
									],
									"parameters": [
										{
											"id": 484,
											"name": "client",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 170,
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 485,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {}
														}
													}
												],
												"name": "XernerxClient",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 481,
										"name": "Handler",
										"package": "xernerx"
									}
								}
							]
						},
						{
							"id": 486,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/handlers/Handler.ts",
									"line": 14,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/Handler.ts#L14"
								}
							],
							"type": {
								"type": "reference",
								"target": 170,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 487,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {}
										}
									}
								],
								"name": "XernerxClient",
								"package": "xernerx"
							}
						},
						{
							"id": 491,
							"name": "load",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/handlers/Handler.ts",
									"line": 46,
									"character": 18,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/Handler.ts#L46"
								}
							],
							"signatures": [
								{
									"id": 492,
									"name": "load",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/handlers/Handler.ts",
											"line": 46,
											"character": 18,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/Handler.ts#L46"
										}
									],
									"parameters": [
										{
											"id": 493,
											"name": "filepath",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"target": 530,
														"name": "XernerxFile",
														"package": "xernerx"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 488,
							"name": "readdir",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/handlers/Handler.ts",
									"line": 20,
									"character": 18,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/Handler.ts#L20"
								}
							],
							"signatures": [
								{
									"id": 489,
									"name": "readdir",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/handlers/Handler.ts",
											"line": 20,
											"character": 18,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/Handler.ts#L20"
										}
									],
									"parameters": [
										{
											"id": 490,
											"name": "directory",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [482]
						},
						{
							"title": "Properties",
							"children": [486]
						},
						{
							"title": "Methods",
							"children": [491, 488]
						}
					],
					"sources": [
						{
							"fileName": "src/handlers/Handler.ts",
							"line": 13,
							"character": 13,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/Handler.ts#L13"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"target": 458,
							"name": "CommandHandler"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [481]
				}
			],
			"sources": [
				{
					"fileName": "src/handlers/Handler.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/handlers/Handler.ts#L1"
				}
			]
		},
		{
			"id": 494,
			"name": "tools/XernerxLog",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 495,
					"name": "default",
					"variant": "declaration",
					"kind": 32,
					"flags": {},
					"sources": [
						{
							"fileName": "src/tools/XernerxLog.ts",
							"line": 5,
							"character": 0,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/tools/XernerxLog.ts#L5"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/tools/XernerxLog.ts",
							"qualifiedName": "XernerxLog"
						},
						"name": "XernerxLog",
						"package": "xernerx"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"children": [495]
				}
			],
			"sources": [
				{
					"fileName": "src/tools/XernerxLog.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/tools/XernerxLog.ts#L1"
				}
			]
		},
		{
			"id": 496,
			"name": "types/interfaces",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 525,
					"name": "XernerxContextCommandHandlerOptions",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"children": [
						{
							"id": 526,
							"name": "directory",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/interfaces.ts",
									"line": 37,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L37"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 527,
							"name": "global",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/interfaces.ts",
									"line": 38,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L38"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [526, 527]
						}
					],
					"sources": [
						{
							"fileName": "src/types/interfaces.ts",
							"line": 36,
							"character": 17,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L36"
						}
					]
				},
				{
					"id": 522,
					"name": "XernerxMessageCommandHandlerOptions",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"children": [
						{
							"id": 523,
							"name": "directory",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/interfaces.ts",
									"line": 33,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L33"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 524,
							"name": "global",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/interfaces.ts",
									"line": 34,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L34"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [523, 524]
						}
					],
					"sources": [
						{
							"fileName": "src/types/interfaces.ts",
							"line": 32,
							"character": 17,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L32"
						}
					]
				},
				{
					"id": 519,
					"name": "XernerxSlashCommandHandlerOptions",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"children": [
						{
							"id": 520,
							"name": "directory",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/interfaces.ts",
									"line": 28,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L28"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 521,
							"name": "global",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/interfaces.ts",
									"line": 29,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L29"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [520, 521]
						}
					],
					"sources": [
						{
							"fileName": "src/types/interfaces.ts",
							"line": 27,
							"character": 17,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L27"
						}
					]
				},
				{
					"id": 497,
					"name": "XernerxStats",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@format",
								"content": []
							}
						]
					},
					"children": [
						{
							"id": 505,
							"name": "commands",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/interfaces.ts",
									"line": 11,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L11"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 506,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 515,
											"name": "context",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/types/interfaces.ts",
													"line": 20,
													"character": 4,
													"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L20"
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 516,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 518,
															"name": "global",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/types/interfaces.ts",
																	"line": 22,
																	"character": 6,
																	"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L22"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 517,
															"name": "local",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/types/interfaces.ts",
																	"line": 21,
																	"character": 6,
																	"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L21"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [518, 517]
														}
													],
													"sources": [
														{
															"fileName": "src/types/interfaces.ts",
															"line": 20,
															"character": 13,
															"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L20"
														}
													]
												}
											}
										},
										{
											"id": 511,
											"name": "message",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/types/interfaces.ts",
													"line": 16,
													"character": 4,
													"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L16"
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 512,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 514,
															"name": "global",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/types/interfaces.ts",
																	"line": 18,
																	"character": 6,
																	"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L18"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 513,
															"name": "local",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/types/interfaces.ts",
																	"line": 17,
																	"character": 6,
																	"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L17"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [514, 513]
														}
													],
													"sources": [
														{
															"fileName": "src/types/interfaces.ts",
															"line": 16,
															"character": 13,
															"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L16"
														}
													]
												}
											}
										},
										{
											"id": 507,
											"name": "slash",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/types/interfaces.ts",
													"line": 12,
													"character": 4,
													"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L12"
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 508,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 510,
															"name": "global",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/types/interfaces.ts",
																	"line": 14,
																	"character": 6,
																	"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L14"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 509,
															"name": "local",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/types/interfaces.ts",
																	"line": 13,
																	"character": 6,
																	"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L13"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [510, 509]
														}
													],
													"sources": [
														{
															"fileName": "src/types/interfaces.ts",
															"line": 12,
															"character": 11,
															"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L12"
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [515, 511, 507]
										}
									],
									"sources": [
										{
											"fileName": "src/types/interfaces.ts",
											"line": 11,
											"character": 12,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L11"
										}
									]
								}
							}
						},
						{
							"id": 498,
							"name": "guilds",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/interfaces.ts",
									"line": 4,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L4"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 501,
							"name": "shardCount",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/interfaces.ts",
									"line": 7,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L7"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 500,
							"name": "shardId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/interfaces.ts",
									"line": 6,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L6"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 502,
							"name": "shards",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/interfaces.ts",
									"line": 8,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L8"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 499,
							"name": "users",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/interfaces.ts",
									"line": 5,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L5"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 503,
							"name": "voteCount",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/interfaces.ts",
									"line": 9,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L9"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 504,
							"name": "votes",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/interfaces.ts",
									"line": 10,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L10"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [505, 498, 501, 500, 502, 499, 503, 504]
						}
					],
					"sources": [
						{
							"fileName": "src/types/interfaces.ts",
							"line": 3,
							"character": 17,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L3"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"children": [525, 522, 519, 497]
				}
			],
			"sources": [
				{
					"fileName": "src/types/interfaces.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/interfaces.ts#L1"
				}
			]
		},
		{
			"id": 528,
			"name": "types/types",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 532,
					"name": "XernerxCommand",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"sources": [
						{
							"fileName": "src/types/types.ts",
							"line": 33,
							"character": 12,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/types.ts#L33"
						}
					],
					"typeParameters": [
						{
							"id": 533,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "reference",
								"target": 529,
								"name": "XernerxFileType",
								"package": "xernerx"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"target": 533,
							"name": "T",
							"package": "xernerx",
							"refersToTypeParameter": true
						},
						"extendsType": {
							"type": "literal",
							"value": "XernerxSlashCommand"
						},
						"trueType": {
							"type": "reference",
							"target": 44,
							"name": "XernerxSlashCommand",
							"package": "xernerx"
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"target": 533,
								"name": "T",
								"package": "xernerx",
								"refersToTypeParameter": true
							},
							"extendsType": {
								"type": "literal",
								"value": "XernerxMessageCommand"
							},
							"trueType": {
								"type": "reference",
								"target": 33,
								"name": "XernerxMessageCommand",
								"package": "xernerx"
							},
							"falseType": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 533,
									"name": "T",
									"package": "xernerx",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "literal",
									"value": "XernerxContextCommand"
								},
								"trueType": {
									"type": "reference",
									"target": 2,
									"name": "XernerxContextCommand",
									"package": "xernerx"
								},
								"falseType": {
									"type": "union",
									"types": [
										{
											"type": "reference",
											"target": 44,
											"name": "XernerxSlashCommand",
											"package": "xernerx"
										},
										{
											"type": "reference",
											"target": 33,
											"name": "XernerxMessageCommand",
											"package": "xernerx"
										},
										{
											"type": "reference",
											"target": 2,
											"name": "XernerxContextCommand",
											"package": "xernerx"
										}
									]
								}
							}
						}
					}
				},
				{
					"id": 530,
					"name": "XernerxFile",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"sources": [
						{
							"fileName": "src/types/types.ts",
							"line": 16,
							"character": 12,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/types.ts#L16"
						}
					],
					"typeParameters": [
						{
							"id": 531,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "reference",
								"target": 529,
								"name": "XernerxFileType",
								"package": "xernerx"
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"target": 531,
							"name": "T",
							"package": "xernerx",
							"refersToTypeParameter": true
						},
						"extendsType": {
							"type": "literal",
							"value": "XernerxSlashCommand"
						},
						"trueType": {
							"type": "reference",
							"target": 44,
							"name": "XernerxSlashCommand",
							"package": "xernerx"
						},
						"falseType": {
							"type": "conditional",
							"checkType": {
								"type": "reference",
								"target": 531,
								"name": "T",
								"package": "xernerx",
								"refersToTypeParameter": true
							},
							"extendsType": {
								"type": "literal",
								"value": "XernerxMessageCommand"
							},
							"trueType": {
								"type": "reference",
								"target": 33,
								"name": "XernerxMessageCommand",
								"package": "xernerx"
							},
							"falseType": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 531,
									"name": "T",
									"package": "xernerx",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "literal",
									"value": "XernerxContextCommand"
								},
								"trueType": {
									"type": "reference",
									"target": 2,
									"name": "XernerxContextCommand",
									"package": "xernerx"
								},
								"falseType": {
									"type": "conditional",
									"checkType": {
										"type": "reference",
										"target": 531,
										"name": "T",
										"package": "xernerx",
										"refersToTypeParameter": true
									},
									"extendsType": {
										"type": "literal",
										"value": "XernerxEvent"
									},
									"trueType": {
										"type": "reference",
										"target": 13,
										"name": "XernerxEvent",
										"package": "xernerx"
									},
									"falseType": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"target": 531,
											"name": "T",
											"package": "xernerx",
											"refersToTypeParameter": true
										},
										"extendsType": {
											"type": "literal",
											"value": "XernerxInhibitor"
										},
										"trueType": {
											"type": "reference",
											"target": 23,
											"name": "XernerxInhibitor",
											"package": "xernerx"
										},
										"falseType": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"target": 44,
													"name": "XernerxSlashCommand",
													"package": "xernerx"
												},
												{
													"type": "reference",
													"target": 33,
													"name": "XernerxMessageCommand",
													"package": "xernerx"
												},
												{
													"type": "reference",
													"target": 44,
													"name": "XernerxSlashCommand",
													"package": "xernerx"
												},
												{
													"type": "reference",
													"target": 13,
													"name": "XernerxEvent",
													"package": "xernerx"
												},
												{
													"type": "reference",
													"target": 23,
													"name": "XernerxInhibitor",
													"package": "xernerx"
												}
											]
										}
									}
								}
							}
						}
					}
				},
				{
					"id": 529,
					"name": "XernerxFileType",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"sources": [
						{
							"fileName": "src/types/types.ts",
							"line": 9,
							"character": 12,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/types.ts#L9"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "XernerxSlashCommand"
							},
							{
								"type": "literal",
								"value": "XernerxMessageCommand"
							},
							{
								"type": "literal",
								"value": "XernerxContextCommand"
							},
							{
								"type": "literal",
								"value": "XernerxEvent"
							},
							{
								"type": "literal",
								"value": "XernerxInhibitor"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [532, 530, 529]
				}
			],
			"sources": [
				{
					"fileName": "src/types/types.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/types/types.ts#L1"
				}
			]
		},
		{
			"id": 534,
			"name": "util/ClientUtil",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 535,
					"name": "ClientUtil",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 536,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/util/ClientUtil.ts",
									"line": 7,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/util/ClientUtil.ts#L7"
								}
							],
							"signatures": [
								{
									"id": 537,
									"name": "new ClientUtil",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/util/ClientUtil.ts",
											"line": 7,
											"character": 2,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/util/ClientUtil.ts#L7"
										}
									],
									"parameters": [
										{
											"id": 538,
											"name": "client",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 170,
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 539,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {}
														}
													}
												],
												"name": "XernerxClient",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 535,
										"name": "ClientUtil",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 553,
										"name": "Util.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 552,
								"name": "Util.constructor"
							}
						},
						{
							"id": 543,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/util/Util.ts",
									"line": 6,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/util/Util.ts#L6"
								}
							],
							"type": {
								"type": "reference",
								"target": 170,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 544,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {}
										}
									}
								],
								"name": "XernerxClient",
								"package": "xernerx"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 556,
								"name": "Util.client"
							}
						},
						{
							"id": 540,
							"name": "uptime",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/util/ClientUtil.ts",
									"line": 11,
									"character": 9,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/util/ClientUtil.ts#L11"
								}
							],
							"signatures": [
								{
									"id": 541,
									"name": "uptime",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/util/ClientUtil.ts",
											"line": 11,
											"character": 9,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/util/ClientUtil.ts#L11"
										}
									],
									"parameters": [
										{
											"id": 542,
											"name": "timestamp",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [536]
						},
						{
							"title": "Properties",
							"children": [543]
						},
						{
							"title": "Methods",
							"children": [540]
						}
					],
					"sources": [
						{
							"fileName": "src/util/ClientUtil.ts",
							"line": 6,
							"character": 13,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/util/ClientUtil.ts#L6"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 551,
							"name": "Util",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [535]
				}
			],
			"sources": [
				{
					"fileName": "src/util/ClientUtil.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/util/ClientUtil.ts#L1"
				}
			]
		},
		{
			"id": 545,
			"name": "util/prompts",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 546,
					"name": "start",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "src/util/prompts.ts",
							"line": 11,
							"character": 22,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/util/prompts.ts#L11"
						}
					],
					"signatures": [
						{
							"id": 547,
							"name": "start",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "src/util/prompts.ts",
									"line": 11,
									"character": 22,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/util/prompts.ts#L11"
								}
							],
							"parameters": [
								{
									"id": 548,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 170,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 549,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										],
										"name": "XernerxClient",
										"package": "xernerx"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [546]
				}
			],
			"sources": [
				{
					"fileName": "src/util/prompts.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/util/prompts.ts#L1"
				}
			]
		},
		{
			"id": 550,
			"name": "util/Util",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 551,
					"name": "Util",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 552,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/util/Util.ts",
									"line": 8,
									"character": 2,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/util/Util.ts#L8"
								}
							],
							"signatures": [
								{
									"id": 553,
									"name": "new Util",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/util/Util.ts",
											"line": 8,
											"character": 2,
											"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/util/Util.ts#L8"
										}
									],
									"parameters": [
										{
											"id": 554,
											"name": "client",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 170,
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 555,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {}
														}
													}
												],
												"name": "XernerxClient",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 551,
										"name": "Util",
										"package": "xernerx"
									}
								}
							]
						},
						{
							"id": 556,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/util/Util.ts",
									"line": 6,
									"character": 26,
									"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/util/Util.ts#L6"
								}
							],
							"type": {
								"type": "reference",
								"target": 170,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 557,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {}
										}
									}
								],
								"name": "XernerxClient",
								"package": "xernerx"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [552]
						},
						{
							"title": "Properties",
							"children": [556]
						}
					],
					"sources": [
						{
							"fileName": "src/util/Util.ts",
							"line": 5,
							"character": 13,
							"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/util/Util.ts#L5"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"target": 535,
							"name": "ClientUtil"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [551]
				}
			],
			"sources": [
				{
					"fileName": "src/util/Util.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/xernerx/xernerx/blob/542db3ac7eedcb95ddf60143931f0694791244cc/src/util/Util.ts#L1"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"children": [1, 12, 22, 32, 43, 169, 457, 480, 494, 496, 528, 534, 545, 550]
		}
	],
	"packageName": "xernerx",
	"packageVersion": "0.1.120-beta.112",
	"readme": [
		{
			"kind": "text",
			"text": "<!-- @format -->\n\n<center>\n\n![ICON](https://dummi.me/icons/XernerxLogoPurple.png)\n\n[![]("
		},
		{
			"kind": "relative-link",
			"text": "./docs/icons/Xernerx%20-%20Logo%20-%20Purple.png"
		},
		{
			"kind": "text",
			"text": ")](https://xernerx.github.io/xernerx)\n\n[![Discord](https://img.shields.io/discord/784094726432489522?logo=discord)](https://discord.gg/teNWyb69dq)\n![npm](https://img.shields.io/npm/dw/xernerx)\n![npm](https://img.shields.io/npm/dt/xernerx)\n![Read the Docs](https://img.shields.io/readthedocs/node)\n![npm type definitions](https://img.shields.io/npm/types/xernerx)\n![node-current](https://img.shields.io/npm/v/discord.js)\n[![wakatime](https://wakatime.com/badge/user/0eeef1b5-98a7-4ec0-ab4c-db00536d5ed1/project/23ab34b7-623b-45e8-b8db-e9f1910589f7.svg)](https://wakatime.com/badge/user/0eeef1b5-98a7-4ec0-ab4c-db00536d5ed1/project/23ab34b7-623b-45e8-b8db-e9f1910589f7)\n![node-current](https://img.shields.io/node/v/xernerx)\n![GitHub commit activity (branch)](https://img.shields.io/github/commit-activity/t/xernerx/xernerx)\n\n</center>\n\n# About\n\nXernerx is a class based discord.js framework. \\[BETA\\]\n\nIt can be customized to be a lightweight handler or a heavy customizable framework that does all the hard work for you\n\n## Features\n\n> - [x] Slash command handler\n> - [x] Message command handler\n> - [x] Context command handler\n> - [x] Event handler (with custom Events)\n> - [x] Inhibitor handler\n> - [x] Extension handler\n> - [x] Client Utilities\n> - [x] Message Utilities\n> - [x] Interaction Utilities\n> - [x] Message command handles\n> - [x] Extension support\n> - [x] ShardClient\n\n## Links\n\n> - [Documentation](https://xernerx.xyz/)\n> - [Guide](https://xernerx.xyz/guide)\n\n## Notes\n\n> - [x] CJS\n> - [x] ESM\n> - [x] TypeScript Types"
		}
	],
	"symbolIdMap": {
		"1": {
			"sourceFileName": "src/builders/XernerxContextCommand.ts",
			"qualifiedName": ""
		},
		"2": {
			"sourceFileName": "src/builders/XernerxContextCommand.ts",
			"qualifiedName": "XernerxContextCommand"
		},
		"3": {
			"sourceFileName": "src/builders/XernerxContextCommand.ts",
			"qualifiedName": "XernerxContextCommand.__constructor"
		},
		"4": {
			"sourceFileName": "src/builders/XernerxContextCommand.ts",
			"qualifiedName": "XernerxContextCommand"
		},
		"5": {
			"sourceFileName": "src/builders/XernerxContextCommand.ts",
			"qualifiedName": "options"
		},
		"6": {
			"sourceFileName": "src/builders/XernerxContextCommand.ts",
			"qualifiedName": "XernerxContextCommand._id"
		},
		"7": {
			"sourceFileName": "src/builders/XernerxContextCommand.ts",
			"qualifiedName": "XernerxContextCommand.name"
		},
		"8": {
			"sourceFileName": "src/builders/XernerxContextCommand.ts",
			"qualifiedName": "XernerxContextCommand.description"
		},
		"9": {
			"sourceFileName": "src/builders/XernerxContextCommand.ts",
			"qualifiedName": "XernerxContextCommand.global"
		},
		"10": {
			"sourceFileName": "src/builders/XernerxContextCommand.ts",
			"qualifiedName": "XernerxContextCommand.filetype"
		},
		"11": {
			"sourceFileName": "src/builders/XernerxContextCommand.ts",
			"qualifiedName": "XernerxContextCommand.collection"
		},
		"12": {
			"sourceFileName": "src/builders/XernerxEvent.ts",
			"qualifiedName": ""
		},
		"13": {
			"sourceFileName": "src/builders/XernerxEvent.ts",
			"qualifiedName": "XernerxEvent"
		},
		"14": {
			"sourceFileName": "src/builders/XernerxEvent.ts",
			"qualifiedName": "XernerxEvent.__constructor"
		},
		"15": {
			"sourceFileName": "src/builders/XernerxEvent.ts",
			"qualifiedName": "XernerxEvent"
		},
		"16": {
			"sourceFileName": "src/builders/XernerxEvent.ts",
			"qualifiedName": "options"
		},
		"17": {
			"sourceFileName": "src/builders/XernerxEvent.ts",
			"qualifiedName": "XernerxEvent._id"
		},
		"18": {
			"sourceFileName": "src/builders/XernerxEvent.ts",
			"qualifiedName": "XernerxEvent.name"
		},
		"19": {
			"sourceFileName": "src/builders/XernerxEvent.ts",
			"qualifiedName": "XernerxEvent.description"
		},
		"20": {
			"sourceFileName": "src/builders/XernerxEvent.ts",
			"qualifiedName": "XernerxEvent.filetype"
		},
		"21": {
			"sourceFileName": "src/builders/XernerxEvent.ts",
			"qualifiedName": "XernerxEvent.collection"
		},
		"22": {
			"sourceFileName": "src/builders/XernerxInhibitor.ts",
			"qualifiedName": ""
		},
		"23": {
			"sourceFileName": "src/builders/XernerxInhibitor.ts",
			"qualifiedName": "XernerxInhibitor"
		},
		"24": {
			"sourceFileName": "src/builders/XernerxInhibitor.ts",
			"qualifiedName": "XernerxInhibitor.__constructor"
		},
		"25": {
			"sourceFileName": "src/builders/XernerxInhibitor.ts",
			"qualifiedName": "XernerxInhibitor"
		},
		"26": {
			"sourceFileName": "src/builders/XernerxInhibitor.ts",
			"qualifiedName": "options"
		},
		"27": {
			"sourceFileName": "src/builders/XernerxInhibitor.ts",
			"qualifiedName": "XernerxInhibitor._id"
		},
		"28": {
			"sourceFileName": "src/builders/XernerxInhibitor.ts",
			"qualifiedName": "XernerxInhibitor.name"
		},
		"29": {
			"sourceFileName": "src/builders/XernerxInhibitor.ts",
			"qualifiedName": "XernerxInhibitor.description"
		},
		"30": {
			"sourceFileName": "src/builders/XernerxInhibitor.ts",
			"qualifiedName": "XernerxInhibitor.filetype"
		},
		"31": {
			"sourceFileName": "src/builders/XernerxInhibitor.ts",
			"qualifiedName": "XernerxInhibitor.collection"
		},
		"32": {
			"sourceFileName": "src/builders/XernerxMessageCommand.ts",
			"qualifiedName": ""
		},
		"33": {
			"sourceFileName": "src/builders/XernerxMessageCommand.ts",
			"qualifiedName": "XernerxMessageCommand"
		},
		"34": {
			"sourceFileName": "src/builders/XernerxMessageCommand.ts",
			"qualifiedName": "XernerxMessageCommand.__constructor"
		},
		"35": {
			"sourceFileName": "src/builders/XernerxMessageCommand.ts",
			"qualifiedName": "XernerxMessageCommand"
		},
		"36": {
			"sourceFileName": "src/builders/XernerxMessageCommand.ts",
			"qualifiedName": "options"
		},
		"37": {
			"sourceFileName": "src/builders/XernerxMessageCommand.ts",
			"qualifiedName": "XernerxMessageCommand._id"
		},
		"38": {
			"sourceFileName": "src/builders/XernerxMessageCommand.ts",
			"qualifiedName": "XernerxMessageCommand.name"
		},
		"39": {
			"sourceFileName": "src/builders/XernerxMessageCommand.ts",
			"qualifiedName": "XernerxMessageCommand.description"
		},
		"40": {
			"sourceFileName": "src/builders/XernerxMessageCommand.ts",
			"qualifiedName": "XernerxMessageCommand.global"
		},
		"41": {
			"sourceFileName": "src/builders/XernerxMessageCommand.ts",
			"qualifiedName": "XernerxMessageCommand.filetype"
		},
		"42": {
			"sourceFileName": "src/builders/XernerxMessageCommand.ts",
			"qualifiedName": "XernerxMessageCommand.collection"
		},
		"43": {
			"sourceFileName": "src/builders/XernerxSlashCommand.ts",
			"qualifiedName": ""
		},
		"44": {
			"sourceFileName": "src/builders/XernerxSlashCommand.ts",
			"qualifiedName": "XernerxSlashCommand"
		},
		"45": {
			"sourceFileName": "src/builders/XernerxSlashCommand.ts",
			"qualifiedName": "XernerxSlashCommand.__constructor"
		},
		"46": {
			"sourceFileName": "src/builders/XernerxSlashCommand.ts",
			"qualifiedName": "XernerxSlashCommand"
		},
		"47": {
			"sourceFileName": "src/builders/XernerxSlashCommand.ts",
			"qualifiedName": "options"
		},
		"48": {
			"sourceFileName": "src/builders/XernerxSlashCommand.ts",
			"qualifiedName": "XernerxSlashCommand._id"
		},
		"49": {
			"sourceFileName": "src/builders/XernerxSlashCommand.ts",
			"qualifiedName": "XernerxSlashCommand.global"
		},
		"50": {
			"sourceFileName": "src/builders/XernerxSlashCommand.ts",
			"qualifiedName": "XernerxSlashCommand.filetype"
		},
		"51": {
			"sourceFileName": "src/builders/XernerxSlashCommand.ts",
			"qualifiedName": "XernerxSlashCommand.collection"
		},
		"52": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SlashCommandBuilder.name"
		},
		"53": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SlashCommandBuilder.name_localizations"
		},
		"54": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SlashCommandBuilder.description"
		},
		"55": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SlashCommandBuilder.description_localizations"
		},
		"56": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SlashCommandBuilder.options"
		},
		"57": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SlashCommandBuilder.contexts"
		},
		"58": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SlashCommandBuilder.default_permission"
		},
		"59": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SlashCommandBuilder.default_member_permissions"
		},
		"60": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SlashCommandBuilder.dm_permission"
		},
		"61": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SlashCommandBuilder.integration_types"
		},
		"62": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SlashCommandBuilder.nsfw"
		},
		"63": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedNameAndDescription.setName"
		},
		"64": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedNameAndDescription.setName"
		},
		"65": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "name"
		},
		"66": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedNameAndDescription.setDescription"
		},
		"67": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedNameAndDescription.setDescription"
		},
		"68": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "description"
		},
		"69": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedNameAndDescription.setNameLocalization"
		},
		"70": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedNameAndDescription.setNameLocalization"
		},
		"71": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "locale"
		},
		"72": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "localizedName"
		},
		"73": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedNameAndDescription.setNameLocalizations"
		},
		"74": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedNameAndDescription.setNameLocalizations"
		},
		"75": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "localizedNames"
		},
		"76": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedNameAndDescription.setDescriptionLocalization"
		},
		"77": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedNameAndDescription.setDescriptionLocalization"
		},
		"78": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "locale"
		},
		"79": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "localizedDescription"
		},
		"80": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedNameAndDescription.setDescriptionLocalizations"
		},
		"81": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedNameAndDescription.setDescriptionLocalizations"
		},
		"82": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "localizedDescriptions"
		},
		"83": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addBooleanOption"
		},
		"84": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addBooleanOption"
		},
		"85": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "input"
		},
		"86": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"87": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"88": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "builder"
		},
		"89": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addUserOption"
		},
		"90": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addUserOption"
		},
		"91": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "input"
		},
		"92": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"93": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"94": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "builder"
		},
		"95": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addChannelOption"
		},
		"96": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addChannelOption"
		},
		"97": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "input"
		},
		"98": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"99": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"100": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "builder"
		},
		"101": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addRoleOption"
		},
		"102": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addRoleOption"
		},
		"103": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "input"
		},
		"104": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"105": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"106": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "builder"
		},
		"107": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addAttachmentOption"
		},
		"108": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addAttachmentOption"
		},
		"109": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "input"
		},
		"110": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"111": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"112": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "builder"
		},
		"113": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addMentionableOption"
		},
		"114": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addMentionableOption"
		},
		"115": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "input"
		},
		"116": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"117": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"118": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "builder"
		},
		"119": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addStringOption"
		},
		"120": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addStringOption"
		},
		"121": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "input"
		},
		"122": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"123": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"124": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "builder"
		},
		"125": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addIntegerOption"
		},
		"126": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addIntegerOption"
		},
		"127": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "input"
		},
		"128": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"129": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"130": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "builder"
		},
		"131": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addNumberOption"
		},
		"132": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandOptions.addNumberOption"
		},
		"133": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "input"
		},
		"134": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"135": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"136": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "builder"
		},
		"137": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandSubcommands.addSubcommandGroup"
		},
		"138": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandSubcommands.addSubcommandGroup"
		},
		"139": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "input"
		},
		"140": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"141": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"142": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "subcommandGroup"
		},
		"143": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandSubcommands.addSubcommand"
		},
		"144": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommandSubcommands.addSubcommand"
		},
		"145": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "input"
		},
		"146": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"147": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "__type"
		},
		"148": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "subcommandGroup"
		},
		"149": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommand.setContexts"
		},
		"150": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommand.setContexts"
		},
		"151": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "contexts"
		},
		"152": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommand.setIntegrationTypes"
		},
		"153": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommand.setIntegrationTypes"
		},
		"154": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "integrationTypes"
		},
		"155": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommand.setDefaultPermission"
		},
		"156": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommand.setDefaultPermission"
		},
		"157": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "value"
		},
		"158": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommand.setDefaultMemberPermissions"
		},
		"159": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommand.setDefaultMemberPermissions"
		},
		"160": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "permissions"
		},
		"161": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommand.setDMPermission"
		},
		"162": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommand.setDMPermission"
		},
		"163": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "enabled"
		},
		"164": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommand.setNSFW"
		},
		"165": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommand.setNSFW"
		},
		"166": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "nsfw"
		},
		"167": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommand.toJSON"
		},
		"168": {
			"sourceFileName": "node_modules/@discordjs/builders/dist/index.d.mts",
			"qualifiedName": "SharedSlashCommand.toJSON"
		},
		"169": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": ""
		},
		"170": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient"
		},
		"171": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.once"
		},
		"172": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.once"
		},
		"173": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Emitter"
		},
		"174": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"175": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "eventEmitter"
		},
		"176": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "eventName"
		},
		"177": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "options"
		},
		"178": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"179": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type.signal"
		},
		"180": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.on"
		},
		"181": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.on"
		},
		"182": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Emitter"
		},
		"183": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"184": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "eventEmitter"
		},
		"185": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "eventName"
		},
		"186": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "options"
		},
		"187": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"188": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type.signal"
		},
		"189": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"190": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"191": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"192": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"193": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"194": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"195": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"196": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "name"
		},
		"197": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"198": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"199": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"200": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"201": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"202": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"203": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventTargets"
		},
		"204": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"205": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"206": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "signal"
		},
		"207": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "resource"
		},
		"208": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"209": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"210": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"211": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.errorMonitor"
		},
		"212": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejectionSymbol"
		},
		"213": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejections"
		},
		"214": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.defaultMaxListeners"
		},
		"215": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.__constructor"
		},
		"216": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient"
		},
		"217": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.T"
		},
		"218": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"219": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "DiscordOptions"
		},
		"220": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxOptions"
		},
		"221": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "config"
		},
		"222": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.settings"
		},
		"223": {
			"sourceFileName": "node_modules/zod/lib/types.d.ts",
			"qualifiedName": "__type"
		},
		"224": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "token"
		},
		"225": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "global"
		},
		"226": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "owners"
		},
		"227": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "guilds"
		},
		"228": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "debug"
		},
		"229": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "log"
		},
		"230": {
			"sourceFileName": "node_modules/zod/lib/types.d.ts",
			"qualifiedName": "__type"
		},
		"231": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "type"
		},
		"232": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "debug"
		},
		"233": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "info"
		},
		"234": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "error"
		},
		"235": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "warn"
		},
		"236": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.stats"
		},
		"237": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.modules"
		},
		"238": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__type"
		},
		"239": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.commandHandler"
		},
		"240": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.options"
		},
		"241": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__type"
		},
		"242": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.message"
		},
		"243": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__type"
		},
		"244": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.global"
		},
		"245": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.prefix"
		},
		"246": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.slash"
		},
		"247": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__type"
		},
		"248": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.global"
		},
		"249": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.context"
		},
		"250": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__type"
		},
		"251": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.global"
		},
		"252": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.util"
		},
		"253": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.commands"
		},
		"254": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__object"
		},
		"255": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__object.message"
		},
		"256": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__object.slash"
		},
		"257": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__object.context"
		},
		"258": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.events"
		},
		"259": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.inhibitors"
		},
		"266": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.application"
		},
		"267": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.channels"
		},
		"268": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.emojis"
		},
		"269": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.emojis"
		},
		"270": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.guilds"
		},
		"271": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.options"
		},
		"272": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"273": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type.intents"
		},
		"274": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.readyAt"
		},
		"275": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.readyAt"
		},
		"276": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.readyTimestamp"
		},
		"277": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.sweepers"
		},
		"278": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.shard"
		},
		"279": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.token"
		},
		"280": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.uptime"
		},
		"281": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.uptime"
		},
		"282": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.user"
		},
		"283": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.users"
		},
		"284": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.voice"
		},
		"285": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.ws"
		},
		"286": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.destroy"
		},
		"287": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.destroy"
		},
		"288": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.deleteWebhook"
		},
		"289": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.deleteWebhook"
		},
		"290": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "id"
		},
		"291": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "options"
		},
		"292": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildPreview"
		},
		"293": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildPreview"
		},
		"294": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "guild"
		},
		"295": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchInvite"
		},
		"296": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchInvite"
		},
		"297": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "invite"
		},
		"298": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "options"
		},
		"299": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildTemplate"
		},
		"300": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildTemplate"
		},
		"301": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "template"
		},
		"302": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchVoiceRegions"
		},
		"303": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchVoiceRegions"
		},
		"304": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchSticker"
		},
		"305": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchSticker"
		},
		"306": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "id"
		},
		"307": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchStickerPacks"
		},
		"308": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchStickerPacks"
		},
		"309": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "options"
		},
		"310": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"311": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type.packId"
		},
		"312": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchStickerPacks"
		},
		"313": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "options"
		},
		"314": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchPremiumStickerPacks"
		},
		"315": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchPremiumStickerPacks"
		},
		"316": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchWebhook"
		},
		"317": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchWebhook"
		},
		"318": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "id"
		},
		"319": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "token"
		},
		"320": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildWidget"
		},
		"321": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildWidget"
		},
		"322": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "guild"
		},
		"323": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.generateInvite"
		},
		"324": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.generateInvite"
		},
		"325": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "options"
		},
		"326": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.login"
		},
		"327": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.login"
		},
		"328": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "token"
		},
		"329": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.isReady"
		},
		"330": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.isReady"
		},
		"331": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.toJSON"
		},
		"332": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.toJSON"
		},
		"333": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.on"
		},
		"334": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.on"
		},
		"335": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"336": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"337": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"338": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"339": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"340": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "args"
		},
		"341": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.on"
		},
		"342": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"343": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"344": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"345": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"346": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"347": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "args"
		},
		"348": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.once"
		},
		"349": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.once"
		},
		"350": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"351": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"352": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"353": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"354": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"355": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "args"
		},
		"356": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.once"
		},
		"357": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"358": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"359": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"360": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"361": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"362": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "args"
		},
		"363": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.emit"
		},
		"364": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.emit"
		},
		"365": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"366": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"367": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "args"
		},
		"368": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.emit"
		},
		"369": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"370": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"371": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "args"
		},
		"372": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.off"
		},
		"373": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.off"
		},
		"374": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"375": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"376": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"377": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"378": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"379": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "args"
		},
		"380": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.off"
		},
		"381": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"382": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"383": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"384": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"385": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"386": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "args"
		},
		"387": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.removeAllListeners"
		},
		"388": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.removeAllListeners"
		},
		"389": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"390": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"391": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Client.removeAllListeners"
		},
		"392": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"393": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "event"
		},
		"394": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "BaseClient.rest"
		},
		"395": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "BaseClient.[asyncDispose]"
		},
		"396": {
			"sourceFileName": "node_modules/discord.js/typings/index.d.mts",
			"qualifiedName": "BaseClient.[asyncDispose]"
		},
		"397": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"398": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"399": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"400": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "error"
		},
		"401": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"402": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"403": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"404": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"405": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"406": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"407": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"408": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"409": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"410": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"411": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"412": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"413": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"414": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"415": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"416": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"417": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"418": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"419": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"420": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"421": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"422": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"423": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"424": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"425": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"426": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"427": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"428": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"429": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"430": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"431": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"432": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"433": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"434": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"435": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"436": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"437": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"438": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"439": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"440": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"441": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"442": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"443": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"444": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"445": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"446": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"447": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "K"
		},
		"448": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"449": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"450": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"451": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"452": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"453": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"454": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"455": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.T"
		},
		"456": {
			"sourceFileName": "src/client/XernerxClient.ts",
			"qualifiedName": "__type"
		},
		"457": {
			"sourceFileName": "src/handlers/CommandHandler.ts",
			"qualifiedName": ""
		},
		"458": {
			"sourceFileName": "src/handlers/CommandHandler.ts",
			"qualifiedName": "CommandHandler"
		},
		"459": {
			"sourceFileName": "src/handlers/CommandHandler.ts",
			"qualifiedName": "CommandHandler.__constructor"
		},
		"460": {
			"sourceFileName": "src/handlers/CommandHandler.ts",
			"qualifiedName": "CommandHandler"
		},
		"461": {
			"sourceFileName": "src/handlers/CommandHandler.ts",
			"qualifiedName": "client"
		},
		"462": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"463": {
			"sourceFileName": "src/handlers/CommandHandler.ts",
			"qualifiedName": "CommandHandler.loadSlashCommands"
		},
		"464": {
			"sourceFileName": "src/handlers/CommandHandler.ts",
			"qualifiedName": "CommandHandler.loadSlashCommands"
		},
		"465": {
			"sourceFileName": "src/handlers/CommandHandler.ts",
			"qualifiedName": "options"
		},
		"466": {
			"sourceFileName": "src/handlers/CommandHandler.ts",
			"qualifiedName": "CommandHandler.loadMessageCommands"
		},
		"467": {
			"sourceFileName": "src/handlers/CommandHandler.ts",
			"qualifiedName": "CommandHandler.loadMessageCommands"
		},
		"468": {
			"sourceFileName": "src/handlers/CommandHandler.ts",
			"qualifiedName": "options"
		},
		"469": {
			"sourceFileName": "src/handlers/CommandHandler.ts",
			"qualifiedName": "CommandHandler.loadContextCommands"
		},
		"470": {
			"sourceFileName": "src/handlers/CommandHandler.ts",
			"qualifiedName": "CommandHandler.loadContextCommands"
		},
		"471": {
			"sourceFileName": "src/handlers/CommandHandler.ts",
			"qualifiedName": "options"
		},
		"472": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "Handler.client"
		},
		"473": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"474": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "Handler.readdir"
		},
		"475": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "Handler.readdir"
		},
		"476": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "directory"
		},
		"477": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "Handler.load"
		},
		"478": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "Handler.load"
		},
		"479": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "filepath"
		},
		"480": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": ""
		},
		"481": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "Handler"
		},
		"482": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "Handler.__constructor"
		},
		"483": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "Handler"
		},
		"484": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "client"
		},
		"485": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"486": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "Handler.client"
		},
		"487": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"488": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "Handler.readdir"
		},
		"489": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "Handler.readdir"
		},
		"490": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "directory"
		},
		"491": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "Handler.load"
		},
		"492": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "Handler.load"
		},
		"493": {
			"sourceFileName": "src/handlers/Handler.ts",
			"qualifiedName": "filepath"
		},
		"494": {
			"sourceFileName": "src/tools/XernerxLog.ts",
			"qualifiedName": ""
		},
		"495": {
			"sourceFileName": "src/tools/XernerxLog.ts",
			"qualifiedName": "default"
		},
		"496": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": ""
		},
		"497": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxStats"
		},
		"498": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxStats.guilds"
		},
		"499": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxStats.users"
		},
		"500": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxStats.shardId"
		},
		"501": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxStats.shardCount"
		},
		"502": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxStats.shards"
		},
		"503": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxStats.voteCount"
		},
		"504": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxStats.votes"
		},
		"505": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxStats.commands"
		},
		"506": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type"
		},
		"507": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type.slash"
		},
		"508": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type"
		},
		"509": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type.local"
		},
		"510": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type.global"
		},
		"511": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type.message"
		},
		"512": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type"
		},
		"513": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type.local"
		},
		"514": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type.global"
		},
		"515": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type.context"
		},
		"516": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type"
		},
		"517": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type.local"
		},
		"518": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "__type.global"
		},
		"519": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxSlashCommandHandlerOptions"
		},
		"520": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxSlashCommandHandlerOptions.directory"
		},
		"521": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxSlashCommandHandlerOptions.global"
		},
		"522": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxMessageCommandHandlerOptions"
		},
		"523": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxMessageCommandHandlerOptions.directory"
		},
		"524": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxMessageCommandHandlerOptions.global"
		},
		"525": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxContextCommandHandlerOptions"
		},
		"526": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxContextCommandHandlerOptions.directory"
		},
		"527": {
			"sourceFileName": "src/types/interfaces.ts",
			"qualifiedName": "XernerxContextCommandHandlerOptions.global"
		},
		"528": {
			"sourceFileName": "src/types/types.ts",
			"qualifiedName": ""
		},
		"529": {
			"sourceFileName": "src/types/types.ts",
			"qualifiedName": "XernerxFileType"
		},
		"530": {
			"sourceFileName": "src/types/types.ts",
			"qualifiedName": "XernerxFile"
		},
		"531": {
			"sourceFileName": "src/types/types.ts",
			"qualifiedName": "T"
		},
		"532": {
			"sourceFileName": "src/types/types.ts",
			"qualifiedName": "XernerxCommand"
		},
		"533": {
			"sourceFileName": "src/types/types.ts",
			"qualifiedName": "T"
		},
		"534": {
			"sourceFileName": "src/util/ClientUtil.ts",
			"qualifiedName": ""
		},
		"535": {
			"sourceFileName": "src/util/ClientUtil.ts",
			"qualifiedName": "ClientUtil"
		},
		"536": {
			"sourceFileName": "src/util/ClientUtil.ts",
			"qualifiedName": "ClientUtil.__constructor"
		},
		"537": {
			"sourceFileName": "src/util/ClientUtil.ts",
			"qualifiedName": "ClientUtil"
		},
		"538": {
			"sourceFileName": "src/util/ClientUtil.ts",
			"qualifiedName": "client"
		},
		"539": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"540": {
			"sourceFileName": "src/util/ClientUtil.ts",
			"qualifiedName": "ClientUtil.uptime"
		},
		"541": {
			"sourceFileName": "src/util/ClientUtil.ts",
			"qualifiedName": "ClientUtil.uptime"
		},
		"542": {
			"sourceFileName": "src/util/ClientUtil.ts",
			"qualifiedName": "timestamp"
		},
		"543": {
			"sourceFileName": "src/util/Util.ts",
			"qualifiedName": "Util.client"
		},
		"544": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"545": {
			"sourceFileName": "src/util/prompts.ts",
			"qualifiedName": ""
		},
		"546": {
			"sourceFileName": "src/util/prompts.ts",
			"qualifiedName": "start"
		},
		"547": {
			"sourceFileName": "src/util/prompts.ts",
			"qualifiedName": "start"
		},
		"548": {
			"sourceFileName": "src/util/prompts.ts",
			"qualifiedName": "client"
		},
		"549": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"550": {
			"sourceFileName": "src/util/Util.ts",
			"qualifiedName": ""
		},
		"551": {
			"sourceFileName": "src/util/Util.ts",
			"qualifiedName": "Util"
		},
		"552": {
			"sourceFileName": "src/util/Util.ts",
			"qualifiedName": "Util.__constructor"
		},
		"553": {
			"sourceFileName": "src/util/Util.ts",
			"qualifiedName": "Util"
		},
		"554": {
			"sourceFileName": "src/util/Util.ts",
			"qualifiedName": "client"
		},
		"555": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"556": {
			"sourceFileName": "src/util/Util.ts",
			"qualifiedName": "Util.client"
		},
		"557": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		}
	},
	"files": {
		"entries": {
			"1": "src/builders/XernerxContextCommand.ts",
			"2": "src/builders/XernerxEvent.ts",
			"3": "src/builders/XernerxInhibitor.ts",
			"4": "src/builders/XernerxMessageCommand.ts",
			"5": "src/builders/XernerxSlashCommand.ts",
			"6": "src/client/XernerxClient.ts",
			"7": "src/handlers/CommandHandler.ts",
			"8": "src/handlers/Handler.ts",
			"9": "src/tools/XernerxLog.ts",
			"10": "src/types/interfaces.ts",
			"11": "src/types/types.ts",
			"12": "src/util/ClientUtil.ts",
			"13": "src/util/prompts.ts",
			"14": "src/util/Util.ts"
		},
		"reflections": {
			"1": 1,
			"2": 12,
			"3": 22,
			"4": 32,
			"5": 43,
			"6": 169,
			"7": 457,
			"8": 480,
			"9": 494,
			"10": 496,
			"11": 528,
			"12": 534,
			"13": 545,
			"14": 550
		}
	}
}
